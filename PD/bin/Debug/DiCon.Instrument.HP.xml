<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DiCon.Instrument.HP</name>
    </assembly>
    <members>
        <member name="T:DiCon.Instrument.HP.AnritsuLaser">
            <summary>
            Define AnritsuLaser's Methods
            </summary>
        </member>
        <member name="M:DiCon.Instrument.HP.AnritsuLaser.init">
            <summary>
            override init
            </summary>
        </member>
        <member name="M:DiCon.Instrument.HP.AnritsuLaser.SetWL(System.Double)">
            <summary>
            Set Wavelength
            </summary>
            <param name="WL">Wavelength</param>
        </member>
        <member name="M:DiCon.Instrument.HP.AnritsuLaser.SetPower(System.Double)">
            <summary>
            Set Power
            </summary>
            <param name="pow">Power</param>
        </member>
        <member name="M:DiCon.Instrument.HP.AnritsuLaser.ReadWL">
            <summary>
            Get Wavelength
            </summary>
            <returns>Wavelength</returns>
        </member>
        <member name="T:DiCon.Instrument.HP.AnritsuTLS">
            <summary>
            Define AnritsuLaser's Methods
            </summary>
        </member>
        <member name="M:DiCon.Instrument.HP.AnritsuTLS.init">
            <summary>
            override init
            </summary>
        </member>
        <member name="M:DiCon.Instrument.HP.AnritsuTLS.SetWL(System.Double)">
            <summary>
            Set Wavelength
            </summary>
            <param name="WL">WL</param>
        </member>
        <member name="M:DiCon.Instrument.HP.AnritsuTLS.SetPower(System.Double)">
            <summary>
            Set Power
            </summary>
            <param name="pow">power</param>
        </member>
        <member name="M:DiCon.Instrument.HP.AnritsuTLS.ReadWL">
            <summary>
            Get Wavelength
            </summary>
            <returns>Wavelength</returns>
        </member>
        <member name="T:DiCon.Instrument.HP.Base">
            <summary>
            The purpose of an abstract class is to provide a common definition of a base class that multiple derived classes with each device can share.
            </summary>
        </member>
        <member name="F:DiCon.Instrument.HP.Base.device">
            <summary>
            Opens and initializes a device and configures it according to specified board number and address.
            </summary>
        </member>
        <member name="M:DiCon.Instrument.HP.Base.init">
            <summary>
            INIT
            </summary>
        </member>
        <member name="M:DiCon.Instrument.HP.Base.SetActive">
            <summary>
            Set Active
            </summary>
        </member>
        <member name="M:DiCon.Instrument.HP.Base.SetWL">
            <summary>
            Set WL
            </summary>
        </member>
        <member name="M:DiCon.Instrument.HP.Base.ReadWL">
            <summary>
            Read WL
            </summary>
            <returns>WL</returns>
        </member>
        <member name="M:DiCon.Instrument.HP.Base.SetPower">
            <summary>
            Set Power
            </summary>
        </member>
        <member name="M:DiCon.Instrument.HP.Base.SetUnit">
            <summary>
            Set Unit
            </summary>
        </member>
        <member name="P:DiCon.Instrument.HP.Base.Addr">
            <summary>
            Set Addr        
            </summary>
        </member>
        <member name="P:DiCon.Instrument.HP.Base.BoardNumber">
            <summary>
            Set BoardNumber
            </summary>
        </member>
        <member name="M:DiCon.Instrument.HP.Base.setAddr(System.Int32)">
            <summary>
            Set device address
            </summary>
            <param name="addr">addr</param>
        </member>
        <member name="M:DiCon.Instrument.HP.Base.getAddr">
            <summary>
            Get device address
            </summary>
            <returns>Address</returns>
        </member>
        <member name="M:DiCon.Instrument.HP.Base.setBoardNo(System.Int32)">
            <summary>
            Set device board number
            </summary>
            <param name="boardNo">board No</param>
        </member>
        <member name="M:DiCon.Instrument.HP.Base.getBoardNo">
            <summary>
            Get device board number
            </summary>
            <returns>Board Number</returns>
        </member>
        <member name="M:DiCon.Instrument.HP.Base.Open">
            <summary>
            Opens a new serial port connection.
            </summary>
            <returns>Return connection status</returns>
        </member>
        <member name="M:DiCon.Instrument.HP.Base.Close">
            <summary>
            Closes the port connection and disposes of the internal Stream object
            </summary>
        </member>
        <member name="M:DiCon.Instrument.HP.Base.GoToLocal">
            <summary>
            Automatically places the specified device in local mode.
            </summary>
            <remarks>Added by Warren 20150306</remarks>
        </member>
        <member name="M:DiCon.Instrument.HP.Base.SendCommand(System.String)">
            <summary>
            Send string command to device
            </summary>
            <param name="strCMD">string command</param>
        </member>
        <member name="M:DiCon.Instrument.HP.Base.Read">
            <summary>
            Reads string data from a device into a user buffer.
            </summary>
            <returns>The string data read from the device.</returns>
        </member>
        <member name="M:DiCon.Instrument.HP.Base.Read(System.Int32)">
            <summary>
            Addresses the GPIB and reads up to the specified number of bytes of data.
            </summary>
            <param name="ileng">Length</param>
            <returns>The string data read from the device.</returns>
        </member>
        <member name="M:DiCon.Instrument.HP.Base.ReadByteArray">
            <summary>
            Reads byte array data from a device into a user buffer. 
            </summary>
            <returns>The byte array data read from the device.</returns>
            <remarks>Added by Warren 20160907</remarks>
        </member>
        <member name="T:DiCon.Instrument.HP.DLS">
            <summary>
            DLS Discrete Laser Sharing Methods
            </summary>
            <example>
            This sample shows how to call DLS class and it's methods .
            <code>
            class TestClass 
            {
                static int Main() 
                {
                    DLS dls = new DLS();
                    if (dls.Open(Application.StartupPath + @"\Test_IxN.ini"))
                    {
                        string[] WL = new string[2];
                        WL = textBox1.Text.Split('-');
                        string result = dls.CheckWLs(Convert.ToDouble(WL[0]),Convert.ToDouble(WL[1]));
                        string[] WLs;
                        WLs = result.Split(',');
                        for (int i = 0; i &lt; WLs.Length; i++)
                        {
                            if (dls.CheckMCS()) //Check if DLS was dead
                                dls.SetWL(Convert.ToDouble(WLs[i]));
                            dls.Close();
                        }
                    }
                }
            }
            </code>
            </example>  
        </member>
        <member name="M:DiCon.Instrument.HP.DLS.Open(System.String)">
            <summary>
            Collect all the wavelengths and COM port of DLS from profile file.
            </summary>
            <param name="ini_path">the path of INI file</param>
            <returns>true or false</returns>
        </member>
        <member name="M:DiCon.Instrument.HP.DLS.SetWL(System.Double)">
            <summary>
            Set wavelength
            </summary>
            <param name="WL">wavelength</param>
        </member>
        <member name="M:DiCon.Instrument.HP.DLS.CloseDLS">
            <summary>
            Close DLS
            </summary>
        </member>
        <member name="M:DiCon.Instrument.HP.DLS.CheckWL(System.Double)">
            <summary>
            Check WaveLength
            </summary>
            <param name="wl">Wavelength</param>
            <returns>true or false</returns>
        </member>
        <member name="M:DiCon.Instrument.HP.DLS.CheckWLs(System.Double,System.Double)">
            <summary>
            Get Valid WaveLengths for DLS
            </summary>
            <param name="StartWL">Start Wavelength</param>
            <param name="StopWL">Stop Wavelength</param>
            <returns>Valid WLs for DLS or Empty</returns>
        </member>
        <member name="M:DiCon.Instrument.HP.DLS.CheckMCS">
            <summary>
            Check if DLS was dead
            </summary>
            <returns>true:MCS is alive, false:MCS is dead</returns>
        </member>
        <member name="M:DiCon.Instrument.HP.DLS.GetValue(System.String)">
            <summary>
            Get parameter of command of DLS
            </summary>
            <param name="strCMD">Command of DLS</param>
            <returns>Value</returns>
        </member>
        <member name="T:DiCon.Instrument.HP.GLLaser">
            <summary>
            GoLight single point Laser Methods
            </summary>
            <example>
            This sample shows how to call GoLight class and it's methods .
            <code>
            class TestClass 
            {
                static int Main() 
                {
                    GLLaser ls = new GLLaser();
                    if (ls.Open(comport))
                    {
                      if (ls.SetActive(true))  //Turning on the laser command must be placed first
                      {
                        ls.SetPower(0.00);
                        MessageBox.Show(ls.ReadPower().ToString());
                        ls.SetActive(false);  //Turning off the laser command must be placed the end
                      }
                    }
                }
            }
            </code>
            </example>  
        </member>
        <member name="M:DiCon.Instrument.HP.GLLaser.Open(System.String)">
            <summary>
            Opens a new serial port connection.
            </summary>
            <param name="comport">"COMn"</param>
            <returns>Return connection status</returns>
            <remarks>Baudrate = 115200</remarks>
        </member>
        <member name="M:DiCon.Instrument.HP.GLLaser.SetActive(System.Boolean)">
            <summary>
            Turn on/off the laser
            </summary>
            <param name="state">true:TLS on, false:TLS off</param>
            <returns>true(Success) or false(Failure)</returns>
        </member>
        <member name="M:DiCon.Instrument.HP.GLLaser.SetPower(System.Double)">
            <summary>
            Set power (dBm)
            </summary>
            <param name="dBm">power(dBm)</param>
        </member>
        <member name="M:DiCon.Instrument.HP.GLLaser.ReadPower">
            <summary>
            Read current power
            </summary>
            <returns>power (dBm)</returns>
            <remarks>!rs232.OpenPort()->return -1.0 | catch (Exception)->return -2.0</remarks>
        </member>
        <member name="M:DiCon.Instrument.HP.GLLaser.SaveSettings">
            <summary>
            Save settings
            </summary>
        </member>
        <member name="M:DiCon.Instrument.HP.GLLaser.ReadWL">
            <summary>
            Read current wavelength
            </summary>
            <returns>wavelength (nm)</returns>
        </member>
        <member name="T:DiCon.Instrument.HP.GLTLS.GLTLS">
            <summary>
            GoLight Tunable Laser Methods
            </summary>
            <example>
            This sample shows how to call GoLight class and it's methods .
            <code>
            class TestClass 
            {
                static int Main() 
                {
                    GLTLS tls = new GLTLS();
                    if (tls.Open(comport))
                    {
                      if (tls.SetActive(true))  //Turning on the laser command must be placed at the first
                      {
                        tls.SetWL(1550);
                        tls.SetPower(0.00);
                        MessageBox.Show(tls.ReadWL().ToString());
                        tls.SetActive(false);  //Turning off the laser command must be placed at the end
                      }
                    }
                }
            }
            </code>
            </example>  
            <summary>
            GoLight Tunable Laser Lambda Scan Methods
            </summary>
            <example>
            This sample shows how to call the LambdaScan method .
            <code>
            class TestClass 
            {
                static int Main() 
                {
                    GLTLS tls = new GLTLS();
                    if (tls.Open(comport))
                    {
                      if (tls.SetActive(true))  //Turning on the laser command must be placed at the first
                      {
                        bool success = tls.LambdaScan(StartWL,StopWL,StepWL);
                        if (!success)
                          MessageBox.Show("LambdaScan fail"); 
                        else MessageBox.Show("LambdaScan Success");  
                        tls.SetActive(false); //Turning off the laser command must be placed at the end 
                      }
                    }
                }
            }
            </code>
            </example>    
            <summary>
            GoLight Tunable Laser Repetivity Lambda Scan Methods
            </summary>
            <example>
            This sample shows how to call the Repetivity Lambda Scan method and Stop the Repetivity Lambda Scan.
            <code>
            class TestClass 
            {
                bool IsStop = false;
                static int Main() 
                {
                    GLTLS tls = new GLTLS();
                    if (tls.Open(comport))
                    {
                      if (tls.SetActive(true)) //Turning on the laser command must be placed at the first
                      {
                        bool success = tls.LambdaScan_Rep(StartWL,StopWL,StepWL);
                        if (success)
                        {
                           do
                           {} while (IsStop == false); //Click Stop button -> IsStop = true;
                           tls.LambdaScan_Stop();
                        }
                        tls.SetActive(false); //Turning off the laser command must be placed at the end
                      }
                      IsStop = false;
                    }
                }
            }
            </code>
            </example>       
        </member>
        <member name="M:DiCon.Instrument.HP.GLTLS.GLTLS.GetComport">
            <summary>
            Query a serial port connection.
            </summary>
            <returns>Return serial port</returns>
        </member>
        <member name="M:DiCon.Instrument.HP.GLTLS.GLTLS.Open(System.String)">
            <summary>
            Opens a new serial port connection.
            </summary>
            <param name="comport">"COMn"</param>
            <returns>Return connection status</returns>
            <remarks>Baudrate = 115200</remarks>
        </member>
        <member name="M:DiCon.Instrument.HP.GLTLS.GLTLS.Close">
            <summary>
            Close serial port connection.
            </summary>
            <remarks>Baudrate = 115200</remarks>
        </member>
        <member name="M:DiCon.Instrument.HP.GLTLS.GLTLS.SetActive(System.Boolean)">
            <summary>
            Turn on/off the laser
            </summary>
            <param name="state">true:TLS on, false:TLS off</param>
            <returns>true(Success) or false(Failure)</returns>
        </member>
        <member name="M:DiCon.Instrument.HP.GLTLS.GLTLS.SetWL(System.Single)">
            <summary>
            Set wavelength
            </summary>
            <param name="WL">wavelength</param>
        </member>
        <member name="M:DiCon.Instrument.HP.GLTLS.GLTLS.SetPower(System.Double)">
            <summary>
            Set power
            </summary>
            <param name="pow">power</param>
        </member>
        <member name="M:DiCon.Instrument.HP.GLTLS.GLTLS.ReadWL">
            <summary>
            Read current wavelength
            </summary>
            <returns>wavelength (nm)</returns>
            <remarks>!rs232.OpenPort()->return -1.0 | catch (Exception)->return -2.0</remarks>
        </member>
        <member name="M:DiCon.Instrument.HP.GLTLS.GLTLS.ReadPower">
            <summary>
            Read current power
            </summary>
            <returns>power (dBm)</returns>
            <remarks>!rs232.OpenPort()->return -1.0 | catch (Exception)->return -2.0</remarks>
        </member>
        <member name="M:DiCon.Instrument.HP.GLTLS.GLTLS.LambdaScan(System.Double,System.Double,System.Double)">
            <summary>
            LambdaScan for GoLight TLS
            </summary>
            <param name="StartWL">Start Wavelength</param>
            <param name="StopWL">Stop Wavelength</param>
            <param name="StepWL">Step Wavelength</param>
            <returns>true(Success) or false(Failure)</returns>
        </member>
        <member name="M:DiCon.Instrument.HP.GLTLS.GLTLS.LambdaScan_Rep(System.Double,System.Double,System.Double)">
            <summary>
            Repetitive LambdaScan for GoLight TLS
            </summary>
            <param name="StartWL">Start Wavelength</param>
            <param name="StopWL">Stop Wavelength</param>
            <param name="StepWL">Step Wavelength</param>
            <returns>true(Success) or false(Failure)</returns>
        </member>
        <member name="M:DiCon.Instrument.HP.GLTLS.GLTLS.LambdaScan_Stop">
            <summary>
            Stop Repetitive LambdaScan for GoLight TLS
            </summary>
        </member>
        <member name="M:DiCon.Instrument.HP.GLTLS.GLTLS.ReadWL_MinMax">
            <summary>
            Get/Read Min and Max WL of TLS
            </summary>
            <returns>"Min Wavelength,Max Wavelength"</returns>
            <remarks>!rs232.OpenPort()->return "-1,-1" | catch (Exception)->return "-2,-2"</remarks>
        </member>
        <member name="M:DiCon.Instrument.HP.GLTLS.GLTLS.ReadPow_MinMax">
            <summary>
            Get/Read Min and Max Power of TLS
            </summary>
            <returns>"Min Power,Max Power"</returns>
            <remarks>!rs232.OpenPort()->return "99,99" | catch (Exception)->return "-99,-99"</remarks>
        </member>
        <member name="T:DiCon.Instrument.HP.GP750">
            <summary>
            Define GP750r's Methods
            </summary>
        </member>
        <member name="M:DiCon.Instrument.HP.GP750.init">
            <summary>
            override init
            </summary>
        </member>
        <member name="T:DiCon.Instrument.HP.GP750gpib">
            <summary>
            Define GP750's Methods
            </summary>
        </member>
        <member name="M:DiCon.Instrument.HP.GP750gpib.init">
            <summary>
            override init
            </summary>
        </member>
        <member name="M:DiCon.Instrument.HP.GP750gpib.SendDataCmd(System.String)">
            <summary>
            Send Data Command
            </summary>
            <param name="strCMD">Command</param>
        </member>
        <member name="M:DiCon.Instrument.HP.GP750gpib.ReadData">
            <summary>
            Read data
            </summary>
            <returns>Exceptions</returns>
        </member>
        <member name="M:DiCon.Instrument.HP.GP750gpib.CloseDevice">
            <summary>
            Close the device
            </summary>
        </member>
        <member name="T:DiCon.Instrument.HP.GP750rs232">
            <summary>
            Define GP750's Rs232 Methods
            </summary>
        </member>
        <member name="M:DiCon.Instrument.HP.GP750rs232.#ctor">
            <summary>
            GP750rs232 Constructor Method
            </summary>
        </member>
        <member name="M:DiCon.Instrument.HP.GP750rs232.SendDataCmd(System.String)">
            <summary>
            Send Data Command
            </summary>
            <param name="strCMD">Command</param>
        </member>
        <member name="M:DiCon.Instrument.HP.GP750rs232.ReadData">
            <summary>
            Read data
            </summary>
            <returns>Exceptions</returns>
        </member>
        <member name="M:DiCon.Instrument.HP.GP750rs232.CloseDevice">
            <summary>
            Close Device
            </summary>
        </member>
        <member name="T:DiCon.Instrument.HP.HP34401A">
            <summary>
            Agilent HP34401A MultiMeter Methods
            </summary>
        </member>
        <member name="M:DiCon.Instrument.HP.HP34401A.init">
            <summary>
            Initialize MultiMeter
            </summary>
        </member>
        <member name="M:DiCon.Instrument.HP.HP34401A.SetDCMode">
            <summary>
            Set DC mode
            </summary>
        </member>
        <member name="M:DiCon.Instrument.HP.HP34401A.SetACMode">
            <summary>
            Set AC mode
            </summary>
        </member>
        <member name="M:DiCon.Instrument.HP.HP34401A.GetDCValue">
            <summary>
            Read DC voltage
            </summary>
            <returns>Voltage</returns>
        </member>
        <member name="M:DiCon.Instrument.HP.HP34401A.GetDCValue(System.Int32)">
            <summary>
            Read DC voltage
            </summary>
            <param name="iDelayTime">Add delay time</param>
            <returns>Voltage</returns>
            <remarks>Copied from Lxx - added by Warren 20160905</remarks>         
        </member>
        <member name="M:DiCon.Instrument.HP.HP34401A.GetACValue">
            <summary>
            Read AC voltage
            </summary>
            <returns>Voltage</returns>
        </member>
        <member name="M:DiCon.Instrument.HP.HP34401A.GetACValue(System.Int32)">
            <summary>
            Read AC voltage
            </summary>
            <param name="iDelayTime">Add delay time</param>
            <returns>Voltage</returns>
            <remarks>Copied from Lxx - added by Warren 20160905</remarks>
        </member>
        <member name="T:DiCon.Instrument.HP.IHP816x">
            <summary>
            Interface of IHP816x
            </summary>
        </member>
        <member name="M:DiCon.Instrument.HP.IHP816x.init">
            <summary>
            init
            </summary>
        </member>
        <member name="M:DiCon.Instrument.HP.IHP816x.SetSlot(System.Int32)">
            <summary>
            Set Slot
            </summary>
            <param name="iSlot">slot</param>
        </member>
        <member name="M:DiCon.Instrument.HP.IHP816x.GetSlot">
            <summary>
            Get Slot
            </summary>
            <returns>Slot</returns>
        </member>
        <member name="M:DiCon.Instrument.HP.IHP816x.SetDeviceStatus(System.Int32)">
            <summary>
            Set Device Status
            </summary>
            <param name="iDeviceStatus">status</param>
        </member>
        <member name="M:DiCon.Instrument.HP.IHP816x.GetDeviceStatus">
            <summary>
            Get Device status
            </summary>
            <returns>Status</returns>
        </member>
        <member name="M:DiCon.Instrument.HP.IHP816x.SetAtt(System.Double)">
            <summary>
            Set Attenuation
            </summary>
            <param name="dAtt">att</param>
        </member>
        <member name="M:DiCon.Instrument.HP.IHP816x.GetAtt">
            <summary>
            Get Attenuation
            </summary>
            <returns>Attenuation</returns>
        </member>
        <member name="T:DiCon.Instrument.HP.HP816x">
            <summary>
            Define HP816x's Methods
            </summary>
        </member>
        <member name="M:DiCon.Instrument.HP.HP816x.SetSlot(System.Int32)">
            <summary>
            Set Slot
            </summary>
            <param name="iSlot">slot</param>
        </member>
        <member name="M:DiCon.Instrument.HP.HP816x.GetSlot">
            <summary>
            Get Slot
            </summary>
            <returns>Slot</returns>
        </member>
        <member name="M:DiCon.Instrument.HP.HP816x.SetDeviceStatus(System.Int32)">
            <summary>
            Set Device Status
            </summary>
            <param name="iDeviceStatus">status</param>
        </member>
        <member name="M:DiCon.Instrument.HP.HP816x.GetDeviceStatus">
            <summary>
            Get Device status
            </summary>
            <returns>Status</returns>
        </member>
        <member name="M:DiCon.Instrument.HP.HP816x.SetAtt(System.Double)">
            <summary>
            Set Attenuation
            </summary>
            <param name="dAtt">att</param>
        </member>
        <member name="M:DiCon.Instrument.HP.HP816x.GetAtt">
            <summary>
            Get Attenuation
            </summary>
            <returns>Attenuation</returns>
        </member>
        <member name="M:DiCon.Instrument.HP.HP816x.init">
            <summary>
            override init
            </summary>
        </member>
        <member name="T:DiCon.Instrument.HP.HPBase">
            <summary>
            The purpose of an abstract class is to provide a common definition of a base class that multiple derived classes with each device can share.
            </summary>
        </member>
        <member name="F:DiCon.Instrument.HP.HPBase.device">
            <summary>
            Opens and initializes a device and configures it according to specified board number and address and visa.
            </summary>
        </member>
        <member name="M:DiCon.Instrument.HP.HPBase.init">
            <summary>
            abstract init
            </summary>
        </member>
        <member name="P:DiCon.Instrument.HP.HPBase.Addr">
            <summary>
            Set device address
            </summary>
        </member>
        <member name="P:DiCon.Instrument.HP.HPBase.BoardNumber">
            <summary>
            Set device BoardNumber
            </summary>
        </member>
        <member name="M:DiCon.Instrument.HP.HPBase.setAddr(System.Int32)">
            <summary>
            Set device address
            </summary>
            <param name="addr">Address</param>
        </member>
        <member name="M:DiCon.Instrument.HP.HPBase.getAddr">
            <summary>
            Get device address
            </summary>
            <returns>Address</returns>
        </member>
        <member name="M:DiCon.Instrument.HP.HPBase.setBoardNo(System.Int32)">
            <summary>
            Set device board number
            </summary>
            <param name="boardNo">Board No</param>
        </member>
        <member name="M:DiCon.Instrument.HP.HPBase.ComInit(System.Boolean,System.Boolean,System.String,System.Int32)">
            <summary>
            Set visa , com , comport resource and comport baudrate
            </summary>
            <param name="visa">true:VISA, false:488.2</param>
            <param name="com">true:RS232, false:VISA</param>
            <param name="comno">comport resource</param>
            <param name="baudrate">comport Baud Rate</param>
        </member>
        <member name="M:DiCon.Instrument.HP.HPBase.setVISA(System.Boolean)">
            <summary>
            Set Visa or NI488.2
            </summary>
            <param name="visa">visa=true(VISA) or visa=false(NI488.2)</param>
            <remarks>visa default value is false</remarks>
        </member>
        <member name="M:DiCon.Instrument.HP.HPBase.getVISA">
            <summary>
            Get Visa or 488.2
            </summary>
            <returns>true(Visa) or false(488.2)</returns>
        </member>
        <member name="M:DiCon.Instrument.HP.HPBase.setCOM(System.Boolean)">
            <summary>
            Set Visa or RS232
            </summary>
            <param name="serial">serial=true(RS232) or serial=false(VISA)</param>
            <remarks>visa default value is false</remarks>
        </member>
        <member name="M:DiCon.Instrument.HP.HPBase.getCOM">
            <summary>
            Get Visa or RS232
            </summary>
            <returns>true(RS232) or false(VISA)</returns>
        </member>
        <member name="M:DiCon.Instrument.HP.HPBase.setCOM_NO(System.String)">
            <summary>
            Set RS232 COM NO
            </summary>
            <param name="com">COM address</param>
        </member>
        <member name="M:DiCon.Instrument.HP.HPBase.getCOM_NO">
            <summary>
            Get RS232 COM NO
            </summary>
            <returns>COM NO</returns>
        </member>
        <member name="M:DiCon.Instrument.HP.HPBase.setCOM_Baud(System.Int32)">
            <summary>
            Set RS232 Baud Rate
            </summary>
            <param name="baud">baud rate</param>
        </member>
        <member name="M:DiCon.Instrument.HP.HPBase.getBoardNo">
            <summary>
            Get device board number
            </summary>
            <returns>Board Number</returns>
        </member>
        <member name="M:DiCon.Instrument.HP.HPBase.Open">
            <summary>
            Opens a new serial port connection.
            </summary>
            <returns>Return connection status</returns>
        </member>
        <member name="M:DiCon.Instrument.HP.HPBase.Close">
            <summary>
            Closes the port connection and disposes of the internal Stream object
            </summary>
        </member>
        <member name="M:DiCon.Instrument.HP.HPBase.GoToLocal">
            <summary>
            Automatically places the specified device in local mode.
            </summary>
            <remarks>Added by Warren 20150306</remarks>
        </member>
        <member name="M:DiCon.Instrument.HP.HPBase.SendCommand(System.String)">
            <summary>
            Send string command to device
            </summary>
            <param name="strCMD">string command</param>
            <returns>Return connection status</returns>
        </member>
        <member name="M:DiCon.Instrument.HP.HPBase.Read">
            <summary>
            Reads string data from a device into a user buffer.
            </summary>
            <returns>The string data read from the device.</returns>
        </member>
        <member name="M:DiCon.Instrument.HP.HPBase.Read(System.Int32)">
            <summary>
            Addresses the GPIB and reads up to the specified number of bytes of data.
            </summary>
            <param name="ileng">length</param>
            <returns>The string data read from the device.</returns>
        </member>
        <member name="M:DiCon.Instrument.HP.HPBase.ReadByteArray">
            <summary>
            Reads byte array data from a device into a user buffer. 
            </summary>
            <returns>The byte array data read from the device.</returns>
            <remarks>Added by Warren 20160907</remarks>
        </member>
        <member name="T:DiCon.Instrument.HP.HPChamper">
             <summary>
             Chamber Methods
             </summary>
             <example>
             This sample shows how to call the method.
             <code>
            class TestClass
            {
                static int Main()
                {
                    HPChamper chamber = new HPChamper();
                    chamber.setVISA(true); //true: VISA
                    chamber.BoardNumber = 0; // GPIB Card Number
                    chamber.Addr = 7; // Device Address
                    chamber.Open();
                    chamber.init();
                    chamber.SetThermotron(-5); 
                    TimeDelay(60000); //user define
                    S2TIL(); //user define
                    chamber.SetThermotron(25);
                    TimeDelay(60000); //user define
                    chamber.Stop();
                }
            }
             </code>
             </example>
             <remark>
             Added by Joe Chen 20181016
             </remark>    
        </member>
        <member name="M:DiCon.Instrument.HP.HPChamper.init">
            <summary>
            override init
            </summary>
        </member>
        <member name="M:DiCon.Instrument.HP.HPChamper.SetThermotron(System.Int32)">
            <summary>
            Set Thermotron Temperature
            </summary>
            <param name="intTemp">temperature</param>
        </member>
        <member name="M:DiCon.Instrument.HP.HPChamper.SetThermotron(System.Int32,System.Int32)">
            <summary>
            Set Thermotron Temperature
            </summary>
            <param name="intTemp">temperature</param>
            <param name="degree_per_min">degree per min</param>
        </member>
        <member name="M:DiCon.Instrument.HP.HPChamper.GetThermoTronTemp">
            <summary>
            Get Thermotron Temperature
            </summary>
            <returns>Temperature</returns>
        </member>
        <member name="M:DiCon.Instrument.HP.HPChamper.GetChamberTemp">
            <summary>
            Get Thermotron Temperature
            </summary>
            <returns>Temperature</returns>
        </member>
        <member name="M:DiCon.Instrument.HP.HPChamper.Stop">
            <summary>
            Stop the Thermotron 
            </summary>
        </member>
        <member name="M:DiCon.Instrument.HP.HPChamper.SetBoardNumber(System.Int32)">
            <summary>
            Set BoardNumber of Thermotron 
            </summary>
            <param name="iboard">BoardNumber</param>
        </member>
        <member name="M:DiCon.Instrument.HP.HPChamper.SetAddr(System.Int32)">
            <summary>
            Set address of Thermotron
            </summary>
            <param name="iaddr">Address</param>
        </member>
        <member name="M:DiCon.Instrument.HP.HPChamper.open">
            <summary>
            Open the Thermotron 
            </summary>
            <returns>Connection Status</returns>
        </member>
        <member name="T:DiCon.Instrument.HP.HPLaser">
            <summary>
            Laser Methods
            </summary>
        </member>
        <member name="M:DiCon.Instrument.HP.HPLaser.init">
            <summary>
            Initialize Laser
            </summary>
        </member>
        <member name="M:DiCon.Instrument.HP.HPLaser.SetWL(System.Double)">
            <summary>
            Set wavelength
            </summary>
            <param name="WL">wavelength</param>
        </member>
        <member name="M:DiCon.Instrument.HP.HPLaser.SetPower(System.Double)">
            <summary>
            Set power
            </summary>
            <param name="pow">power</param>
        </member>
        <member name="M:DiCon.Instrument.HP.HPLaser.ReadWL">
            <summary>
            Read current wavelength
            </summary>
            <returns>wavelength</returns>
        </member>
        <member name="T:DiCon.Instrument.HP.HPMultiMeter">
            <summary>
            MultiMeter Methods
            </summary>
            <example>
            Compare the wavelength difference and the power difference between TLS and HP_MultiMeter to test the Accuracy of TLS .
            <code>
            class TestClass 
            {
                static int Main() 
                {
                    hptls = new HPTLS();
                    hptls.BoardNumber = 0;
                    hptls.Addr = 24;
                    hptls.Open();
                    hptls.init();
                    hptls.SetActive(true);
                    hptls.SetWL(TLSWL);
                    hptls.setUnit(1);
                    hptls.SetPower(TLSPower);
                    
                    hpmultimeter = new HPMultiMeter();
                    hpmultimeter.Addr = 20;
                    hpmultimeter.BoardNumber = 0;
                    hpmultimeter.Open();
                    hpmultimeter.init();
                    
                    MeterWL = Math.Round(hpmultimeter.ReadWL(), 3);
                    MeterPow = Math.Round(hpmultimeter.ReadPower(), 2);
                    
                    WLDiff = Math.Round(MeterWL - TLSWL, 3);
                    PowDiff = Math.Round(MeterPow - TLSPower, 2);
                    hptls.Close(); 
                    hpmultimeter.Close();
                }
            }
            </code>
            </example>    
        </member>
        <member name="M:DiCon.Instrument.HP.HPMultiMeter.init">
            <summary>
            override init
            </summary>
        </member>
        <member name="M:DiCon.Instrument.HP.HPMultiMeter.ReadWL">
            <summary>
            read wavelength of multimeter
            </summary>
            <returns>wave length</returns>
        </member>
        <member name="M:DiCon.Instrument.HP.HPMultiMeter.ReadPower">
            <summary>
            read power of multimeter
            </summary>
            <returns>power</returns>
        </member>
        <member name="T:DiCon.Instrument.HP.HPOSA">
             <summary>
             Agilent Optical Spectrum Analyzer Methods
             </summary>
             <example>
             This sample shows how to call the method.
             <code>
            class TestClass
            {
                static int Main()
                {
                    HPOSA osa = new HPOSA();
                    double swl = 1290;
                    double ewl = 1620;
                    double res = 1;
                    //*********************Set OSA****************************
                    listBox1.Items.Clear();
                    osa.setVISA(true); //true: VISA
                    osa.BoardNumber = 0; // GPIB Card Number
                    osa.Addr = 24; // Device Address
                    osa.Open();
                    osa.init();
                    osa.DisplayScale(5); // Attenuation Scale of Device Screen
                    osa.RefLevel(-30); // y axis center point
                    //*********************Start Trace and Get OSA Data************************
                    string result = osa.StartTrace(swl, ewl,sen, res, true); //5th parameter:true->set res to OSA, false->calculate points
                    // Data Format : WL1, IL1, WL2, IL2, WL3, IL3, ...
                    string[] eachdata = result.Split(',');
            
                    for (int wlidx = 0; wlidx &lt; eachdata.Length / 2; wlidx++)
                    {
                        listBox1.Items.Add($"Wavelength: {eachdata[2 * wlidx]}, Attenuation: {eachdata[2 * wlidx + 1]}");
                    }
            
                    // Output format: Wavelength: 1290, Attenuation: -12.033
                }
            }
             </code>
             </example>
             <remark>
             Added by Joe Chen 20181002
             </remark>
        </member>
        <member name="F:DiCon.Instrument.HP.HPOSA._res">
            <summary>
            Opens and initializes a device and configures it according to specified board number and address and visa.
            </summary>
        </member>
        <member name="M:DiCon.Instrument.HP.HPOSA.init">
            <summary>
            Initialize OSA
            </summary>
        </member>
        <member name="M:DiCon.Instrument.HP.HPOSA.AutoMeaCal">
            <summary>
            Auto Measurement Calibration
            </summary>
        </member>
        <member name="M:DiCon.Instrument.HP.HPOSA.StartTrace(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Set wavelength range
            </summary>
            <param name="swl">start wavelength</param>
            <param name="ewl">end wavelength</param>
            <param name="_sen">sensitivity</param>
            <param name="_res">resolution</param>
            <returns>string power:WL1, IL1, WL2, IL2,...</returns>
        </member>
        <member name="M:DiCon.Instrument.HP.HPOSA.StartTrace(System.Double,System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Set wavelength range
            </summary>
            <param name="swl">start wavelength</param>
            <param name="ewl">end wavelength</param>
            <param name="_sen">sensitivity</param>
            <param name="_res">step</param>
            <param name="IsSetRes">Is set Res?</param>
            <returns>string power:WL1, IL1, WL2, IL2,...</returns>
        </member>
        <member name="M:DiCon.Instrument.HP.HPOSA.SetSpan(System.Double)">
            <summary>
            Set wavelength span
            </summary>
            <param name="ispan">span</param>
        </member>
        <member name="M:DiCon.Instrument.HP.HPOSA.SetResolution(System.Double)">
            <summary>
            Set resolution bandwidth
            </summary>
            <param name="ires">resolution</param>
            <remark> Adjust by Benson 2017/08/14 </remark>>
        </member>
        <member name="M:DiCon.Instrument.HP.HPOSA.SetVideoBW(System.Double)">
            <summary>
            Set video bandwidth
            </summary>
            <param name="ires">resolution</param>
        </member>
        <member name="M:DiCon.Instrument.HP.HPOSA.SetRange(System.Double)">
            <summary>
            Set sensitive
            </summary>
            <param name="irange">upper/lower limit</param>
        </member>
        <member name="M:DiCon.Instrument.HP.HPOSA.RefLevel(System.Double)">
            <summary>
            Set y axis center in osa
            </summary>
            <param name="ilevel">center o</param>
        </member>
        <member name="M:DiCon.Instrument.HP.HPOSA.DisplayScale(System.Double)">
            <summary>
            Scale of displaying chart in osa
            </summary>
            <param name="iscale">scale number</param>
        </member>
        <member name="M:DiCon.Instrument.HP.HPOSA.SetTracePoint(System.Int32)">
            <summary>
            Set trace length to points
            </summary>
            <param name="ipoint">points</param>
        </member>
        <member name="M:DiCon.Instrument.HP.HPOSA.GetTotalPower(System.Double[]@,System.Double,System.Double,System.Double)">
            <summary>
            Read total power (default span=10, resolution=5)
            </summary>
            <param name="power">power</param>
            <param name="startwl">start wavelength</param>
            <param name="endwl">end wavelength</param>
            <param name="ires">resolution</param>
        </member>
        <member name="M:DiCon.Instrument.HP.HPOSA.GetTotalPower(System.Double[]@,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Read total power
            </summary>
            <param name="power">power</param>
            <param name="startwl">start wavelength</param>
            <param name="endwl">end wavelength</param>
            <param name="ispan">wavelength span</param>
            <param name="ires">resolution bandwidth</param>
        </member>
        <member name="M:DiCon.Instrument.HP.HPOSA.GetAllPower(System.String,System.Double,System.Double,System.Double)">
            <summary>
            Read All power in exact wavelength format
            </summary>
            <param name="rawdata">raw data</param>
            <param name="osastep">wavelength step</param>
            <param name="swl">start wavelength</param>
            <param name="ewl">end wavelength</param>
            <returns>string power:WL1, IL1, WL2, IL2,...</returns>
        </member>
        <member name="M:DiCon.Instrument.HP.HPOSA.GetSpanPower(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Read power
            </summary>
            <param name="centerwl">center wavelength</param>
            <param name="ispan">wavelength span</param>
            <param name="ires">resolution bandwidth</param>
            <param name="irange">range</param>
            <returns>power</returns>
        </member>
        <member name="M:DiCon.Instrument.HP.HPOSA.GetSpanPower(System.Double,System.Double,System.Double)">
            <summary>
            Read power without resolution
            </summary>
            <param name="centerwl">center wavelength</param>
            <param name="iRange">range</param>
            <param name="ispan">wavelength span</param>
            <returns>power</returns>
        </member>
        <member name="M:DiCon.Instrument.HP.HPOSA.GetPower(System.Double)">
            <summary>
            Read power from a wavelength
            </summary>
            <param name="centerwl">center wavelength</param>
            <returns>power</returns>
        </member>
        <member name="M:DiCon.Instrument.HP.HPOSA.GetPeakWL">
            <summary>
            Read peak wavelength
            </summary>
            <returns>wavelength</returns>
        </member>
        <member name="M:DiCon.Instrument.HP.HPOSA.GetPeakWL2">
            <summary>
            Read peak wavelength
            </summary>
            <returns>wavelength</returns>
        </member>
        <member name="M:DiCon.Instrument.HP.HPOSA.GetPeakPower">
            <summary>
            Read power of peak wavelength
            </summary>
            <returns>power</returns>
            <remarks>Copied from Lxx - added by Warren 20160904</remarks>
        </member>
        <member name="M:DiCon.Instrument.HP.HPOSA.SetWLStart(System.Double)">
            <summary>
            Set start Wavelength
            </summary>
            <param name="wl">wavelength</param>
        </member>
        <member name="M:DiCon.Instrument.HP.HPOSA.SetWLStop(System.Double)">
            <summary>
            Set stop Wavelength
            </summary>
            <param name="wl">wavelength</param>
        </member>
        <member name="M:DiCon.Instrument.HP.HPOSA.MarkRefLevel">
            <summary>
            Mark Ref Level
            </summary>
        </member>
        <member name="M:DiCon.Instrument.HP.HPOSA.MarkToCenter">
            <summary>
            Mark to center
            </summary>
        </member>
        <member name="M:DiCon.Instrument.HP.HPOSA.Scan">
            <summary>
            Start to scan
            </summary>
        </member>
        <member name="M:DiCon.Instrument.HP.HPOSA.SetPeak">
            <summary>
            Set peak
            </summary>
        </member>
        <member name="M:DiCon.Instrument.HP.HPOSA.SetBandWidthdB(System.Double)">
            <summary>
            Set band width dB
            </summary>
            <param name="idB">IL</param>
        </member>
        <member name="M:DiCon.Instrument.HP.HPOSA.ReadBandWidthWL(System.Int32)">
            <summary>
            Read band width WL
            </summary>
            <param name="idx">idx</param>   
            <returns> wavelength</returns>
        </member>
        <member name="M:DiCon.Instrument.HP.HPOSA.ReadBandWidth">
            <summary>
            Read band width WL
            </summary>
            <returns> axis values between markers</returns>
        </member>
        <member name="T:DiCon.Instrument.HP.HPPDL">
            <summary>
            Agilent Polarization Controller Methods
            </summary>
            <example>
            This sample shows how to call the method.
            <code>
            class TestClass 
            {
                static int Main() 
                {
                    HPPDL pdl = new HPPDL();
                    pdl.Addr = 11;
                    pdl.BoardNumber = 1;
                    pdl.Open();
                    pdl.init();
                    pdl.scanRate(50);
                    pdl.startPolarizationScan();;
                    pdl.stopPolarizationScan();
                    pdl.Reset(); //Change the direction of polarization 
                }
            }
            </code>
            </example>
        </member>
        <member name="M:DiCon.Instrument.HP.HPPDL.init">
            <summary>
            Initialize Polarization Controller
            </summary>
        </member>
        <member name="M:DiCon.Instrument.HP.HPPDL.scanRate(System.Int32)">
            <summary>
            Scan rate, depend on the averaging time of the instrument.
            </summary>
            <param name="irate">rate</param>
        </member>
        <member name="M:DiCon.Instrument.HP.HPPDL.startPolarizationScan">
            <summary>
            Start polarization
            </summary>
        </member>
        <member name="M:DiCon.Instrument.HP.HPPDL.stopPolarizationScan">
            <summary>
            Stop polarization
            </summary>
        </member>
        <member name="M:DiCon.Instrument.HP.HPPDL.Reset">
            <summary>
            Reset polarization
            </summary>
        </member>
        <member name="M:DiCon.Instrument.HP.HPPDL.GetHPPDL(DiCon.Instrument.HP.HPPDL,System.Int32,System.Int32,System.Int32)">
            <summary>
            Create a PDL object
            </summary>
            <param name="hppdl">object</param>
            <param name="iboard">board number</param>
            <param name="iaddr">polarization controller address</param>
            <param name="iscanrate">polarization controller scan rate</param>
            <returns>PDL object</returns>
            <remarks>Copied from Lxx - added by Warren 20160905</remarks>
        </member>
        <member name="T:DiCon.Instrument.HP.IHPPM">
            <summary>
            Interface of IHPPM
            </summary>
        </member>
        <member name="M:DiCon.Instrument.HP.IHPPM.SetmSlot(System.Int32)">
            <summary>
            Set slot
            </summary>
            <param name="iSlot">slot</param>
        </member>
        <member name="M:DiCon.Instrument.HP.IHPPM.GetmSlot">
            <summary>
            Get slot
            </summary>
            <returns>slot</returns>
        </member>
        <member name="M:DiCon.Instrument.HP.IHPPM.SetmCHNo(System.Int32)">
            <summary>
            Set CH NO
            </summary>
            <param name="iCHNo">CH NO</param>
        </member>
        <member name="M:DiCon.Instrument.HP.IHPPM.GetmCHNo">
            <summary>
            Get CH NO
            </summary>
            <returns>CH NO</returns>
        </member>
        <member name="M:DiCon.Instrument.HP.IHPPM.SetmRangeMode(System.Int32)">
            <summary>
            Set range Mode
            </summary>
            <param name="iRangeMode">range mode</param>
        </member>
        <member name="M:DiCon.Instrument.HP.IHPPM.GetmRangeMode">
            <summary>
            Get Range Mode
            </summary>
            <returns>range mode</returns>
        </member>
        <member name="M:DiCon.Instrument.HP.IHPPM.SetmPowerUnit(System.Int32)">
            <summary>
            Set power unit
            </summary>
            <param name="iPowerUnit">Unit</param>
        </member>
        <member name="M:DiCon.Instrument.HP.IHPPM.GetmPowerUnit">
            <summary>
            Get Power Unit
            </summary>
            <returns>Unit</returns>
        </member>
        <member name="M:DiCon.Instrument.HP.IHPPM.SetmWL(System.Double)">
            <summary>
            Set WL
            </summary>
            <param name="dWL">WaveLength</param>
        </member>
        <member name="M:DiCon.Instrument.HP.IHPPM.GetmWL">
            <summary>
            Get WL
            </summary>
            <returns>WaveLength</returns>
        </member>
        <member name="M:DiCon.Instrument.HP.IHPPM.SetmAveragingTime(System.Double)">
            <summary>
            Set Averaging Time
            </summary>
            <param name="dAveragingTime">averaging time</param>
        </member>
        <member name="M:DiCon.Instrument.HP.IHPPM.GetmAveragingTime">
            <summary>
            Get Averaging Time
            </summary>
            <returns>averaging time</returns>
        </member>
        <member name="M:DiCon.Instrument.HP.IHPPM.SetmPowerRange(System.Double)">
            <summary>
            Set Power Range
            </summary>
            <param name="dPowerRange">power range</param>
        </member>
        <member name="M:DiCon.Instrument.HP.IHPPM.GetmPowerRange">
            <summary>
            Get Power Range
            </summary>
            <returns>power range</returns>
        </member>
        <member name="M:DiCon.Instrument.HP.IHPPM.init">
            <summary>
            Initialize power meter
            </summary>
        </member>
        <member name="M:DiCon.Instrument.HP.IHPPM.SetWL(System.Double)">
            <summary>
            Set wavelength of power meter
            </summary>
            <param name="WL">wavelength</param>
        </member>
        <member name="M:DiCon.Instrument.HP.IHPPM.setUnit(System.Int32)">
            <summary>
            Set unit of power meter
            </summary>
            <param name="units">1(dBm), 0(W)</param>
        </member>
        <member name="M:DiCon.Instrument.HP.IHPPM.ReadPower">
            <summary>
            Read power from power meter
            </summary>
            <returns>Power</returns>
        </member>
        <member name="M:DiCon.Instrument.HP.IHPPM.aveTime(System.Int32)">
            <summary>
            Scan power meter once in a while
            </summary>
            <param name="avgT">average time</param>
        </member>
        <member name="M:DiCon.Instrument.HP.IHPPM.AutoRange(System.Boolean)">
            <summary>
            Set power meter to receiver light source range
            </summary>
            <param name="States">Used to indicate status</param>
        </member>
        <member name="M:DiCon.Instrument.HP.IHPPM.ReadWL">
            <summary>
            Read the current wavelength of power meter
            </summary>
            <returns>wavelength</returns>
        </member>
        <member name="M:DiCon.Instrument.HP.IHPPM.ReadWL_Min">
            <summary>
            Get/Read Min WL of PM
            </summary>
            <returns>WL</returns>
            <remarks>Added by Warren 20140219</remarks>
        </member>
        <member name="M:DiCon.Instrument.HP.IHPPM.ReadWL_Max">
            <summary>
            Get/Read Max WL of PM
            </summary>
            <returns>WL</returns>
            <remarks>Added by Warren 20140219 </remarks>
        </member>
        <member name="M:DiCon.Instrument.HP.IHPPM.ReadReference(System.Int32)">
            <summary>
            Read Reference
            </summary>
            <param name="iref">index</param>
            <returns> reference</returns>
        </member>
        <member name="M:DiCon.Instrument.HP.IHPPM.SetReference(System.Int32,System.Double)">
            <summary>
            Set Reference
            </summary>
            <param name="iref">index</param>
            <param name="refvalue"> reference </param>
        </member>
        <member name="M:DiCon.Instrument.HP.IHPPM.SetReferenceStatus(System.Int32)">
            <summary>
            Set Reference
            </summary>
            <param name="iref">index</param>
        </member>
        <member name="M:DiCon.Instrument.HP.IHPPM.ReadReferenceStatus">
            <summary>
            Read Reference Status
            </summary>
            <returns>status</returns>
        </member>
        <member name="T:DiCon.Instrument.HP.HPPM">
            <summary> 
            PM Methos
            </summary>
            <example>
            This sample shows how to call the method.
            <code>
            class TestClass 
            {
                static int Main() 
                {
                    HPPM pwm = new HPPM();
                    pwm.setVisa(true); //true : Visa, false : 488.2
                    pwm.Addr = 24;
                    pwm.Slot = 1;
                    pwm.BoardNumber = 0;
                    pwm.Open();
                    pwm.init();
                    pwm.setUnit(1);;
                    pwm.AutoRange(true);
                    pwm.aveTime(20);
                    pwm.SetWL(1550.00);
                    MessageBox.Show(pwm.ReadPower().ToString());
                    pwm.Close(); 
                }
            }
            </code>
            </example>
        </member>
        <member name="M:DiCon.Instrument.HP.HPPM.SetmSlot(System.Int32)">
            <summary>
            Set slot
            </summary>
            <param name="iSlot">slot</param>
        </member>
        <member name="M:DiCon.Instrument.HP.HPPM.GetmSlot">
            <summary>
            Get slot
            </summary>
            <returns>slot</returns>
        </member>
        <member name="M:DiCon.Instrument.HP.HPPM.SetmCHNo(System.Int32)">
            <summary>
            Set CH NO
            </summary>
            <param name="iCHNo">CH NO</param>
        </member>
        <member name="M:DiCon.Instrument.HP.HPPM.GetmCHNo">
            <summary>
            Get CH NO
            </summary>
            <returns>CH NO</returns>
        </member>
        <member name="M:DiCon.Instrument.HP.HPPM.SetmRangeMode(System.Int32)">
            <summary>
            Set range Mode
            </summary>
            <param name="iRangeMode">range mode</param>
        </member>
        <member name="M:DiCon.Instrument.HP.HPPM.GetmRangeMode">
            <summary>
            Get Range Mode
            </summary>
            <returns>range mode</returns>
        </member>
        <member name="M:DiCon.Instrument.HP.HPPM.SetmPowerUnit(System.Int32)">
            <summary>
            Set power unit
            </summary>
            <param name="iPowerUnit">Unit</param>
        </member>
        <member name="M:DiCon.Instrument.HP.HPPM.GetmPowerUnit">
            <summary>
            Get Power Unit
            </summary>
            <returns>Unit</returns>
        </member>
        <member name="M:DiCon.Instrument.HP.HPPM.SetmWL(System.Double)">
            <summary>
            Set WL
            </summary>
            <param name="dWL">WaveLength</param>
        </member>
        <member name="M:DiCon.Instrument.HP.HPPM.GetmWL">
            <summary>
            Get WL
            </summary>
            <returns>WaveLength</returns>
        </member>
        <member name="M:DiCon.Instrument.HP.HPPM.SetmAveragingTime(System.Double)">
            <summary>
            Set Averaging Time
            </summary>
            <param name="dAveragingTime">averaging time</param>
        </member>
        <member name="M:DiCon.Instrument.HP.HPPM.GetmAveragingTime">
            <summary>
            Get Averaging Time
            </summary>
            <returns>averaging time</returns>
        </member>
        <member name="M:DiCon.Instrument.HP.HPPM.SetmPowerRange(System.Double)">
            <summary>
            Set Power Range
            </summary>
            <param name="dPowerRange">power range</param>
        </member>
        <member name="M:DiCon.Instrument.HP.HPPM.GetmPowerRange">
            <summary>
            Get Power Range
            </summary>
            <returns>power range</returns>
        </member>
        <member name="P:DiCon.Instrument.HP.HPPM.Slot">
            <summary>
            Set slot
            </summary>
        </member>
        <member name="M:DiCon.Instrument.HP.HPPM.init">
            <summary>
            Initialize power meter
            </summary>
        </member>
        <member name="M:DiCon.Instrument.HP.HPPM.SetSlot(System.Int32)">
            <summary>
            Set slot of power meter
            </summary>
            <param name="iSlot">slot</param>
        </member>
        <member name="M:DiCon.Instrument.HP.HPPM.SetWL(System.Double)">
            <summary>
            Set wavelength of power meter
            </summary>
            <param name="WL">wavelength</param>
        </member>
        <member name="M:DiCon.Instrument.HP.HPPM.setUnit(System.Int32)">
            <summary>
            Set unit of power meter
            </summary>
            <param name="units">1(dBm), 0(W)</param>
        </member>
        <member name="M:DiCon.Instrument.HP.HPPM.enableMaxMinFunc(System.String,System.Int32)">
            <summary>
            Enable Max Min function of PM
            </summary>
            <param name="mode">mode</param>
            <param name="delayTime">delay time</param>
            <remarks>Added by Warren 20160904 </remarks>
        </member>
        <member name="M:DiCon.Instrument.HP.HPPM.startMaxMinFunc">
            <summary>
            Start Max Min function of PM
            </summary>
            <remarks>Added by Warren 20160904</remarks>
        </member>
        <member name="M:DiCon.Instrument.HP.HPPM.stopMaxMinFunc(System.Int32)">
            <summary>
            Stop Max Min function of PM 
            </summary>
            <param name="delayTime">delay time</param>
            <remarks>Added by Warren 20160904</remarks>
        </member>
        <member name="M:DiCon.Instrument.HP.HPPM.getMaxMinDelta(System.Int32,System.IO.StreamWriter)">
            <summary>
            Get the result of Abs(Max - Min) of PM power
            </summary>
            <param name="pmIdx">PM IDX</param>
            <param name="writer">Stream Writer</param>
            <returns>Delta</returns>
            Added by Warren 20160908 xxx
        </member>
        <member name="M:DiCon.Instrument.HP.HPPM.getMaxMinDelta(System.Int32)">
            <summary>
            Get the result of Abs(Max - Min) of PM power
            </summary>
            <param name="pmIdx">PM IDX</param>
            <returns>Delta</returns>
            Added by Warren 20160908 xxx
        </member>
        <member name="M:DiCon.Instrument.HP.HPPM.ReadPower">
            <summary>
            Read power from power meter
            </summary>
            <returns>Power</returns>
        </member>
        <member name="M:DiCon.Instrument.HP.HPPM.ReadPower(System.Int32)">
            <summary>
            Read power from power meter
            </summary>
            <param name="icount">count</param>
            <returns>power</returns>
            Copied from Lxx - added by Warren 20160904
        </member>
        <member name="M:DiCon.Instrument.HP.HPPM.ReadPower(System.Int32,System.Int32)">
            <summary>
            Read power from power meter
            </summary>
            <param name="icount">count</param>
            <param name="idelay">delay time</param>
            <returns>Power</returns>
             Copied from Lxx - added by Warren 20160904
        </member>
        <member name="M:DiCon.Instrument.HP.HPPM.aveTime(System.Int32)">
            <summary>
            Scan power meter once in a while
            </summary>
            <param name="avgT">average time</param>
        </member>
        <member name="M:DiCon.Instrument.HP.HPPM.setAverageTime(System.Int32)">
            <summary>
            Scan power meter once in a while
            </summary>
            <param name="time">average time</param>
        </member>
        <member name="M:DiCon.Instrument.HP.HPPM.AutoRange(System.Boolean)">
            <summary>
            Set power meter to receiver light source range
            </summary>
            <param name="States">Used to indicate status</param>
        </member>
        <member name="M:DiCon.Instrument.HP.HPPM.ReadWL">
            <summary>
            Read the current wavelength of power meter
            </summary>
            <returns>wavelength</returns>
        </member>
        <member name="M:DiCon.Instrument.HP.HPPM.ReadWL_Min">
            <summary>
            Get/Read Min WL of PM
            </summary>
            <returns>WaveLength</returns>
            <remarks>Added by Warren 20140219</remarks>
        </member>
        <member name="M:DiCon.Instrument.HP.HPPM.ReadWL_Max">
            <summary>
            Get/Read Max WL of PM
            </summary>
            <returns>WL</returns>
            <remarks>Added by Warren 20140219 </remarks>
        </member>
        <member name="M:DiCon.Instrument.HP.HPPM.ReadReference(System.Int32)">
            <summary>
            Read Reference
            </summary>
            <param name="iref">index</param>
            <returns> reference</returns>
        </member>
        <member name="M:DiCon.Instrument.HP.HPPM.SetReference(System.Int32,System.Double)">
            <summary>
            Set Reference
            </summary>
            <param name="iref">index</param>
            <param name="refvalue"> reference </param>
        </member>
        <member name="M:DiCon.Instrument.HP.HPPM.SetReferenceStatus(System.Int32)">
            <summary>
            Set Reference
            </summary>
            <param name="iref">index</param>
        </member>
        <member name="M:DiCon.Instrument.HP.HPPM.ReadReferenceStatus">
            <summary>
            Read Reference Status
            </summary>
            <returns>status</returns>
        </member>
        <member name="M:DiCon.Instrument.HP.HPPM.GetPM(DiCon.Instrument.HP.HPPM,System.Int32,System.Int32,System.Int32)">
            <summary>
            Create a power meter object
            </summary>
            <param name="hppm">object</param>
            <param name="iboard">board number</param>
            <param name="iaddr">power meter address</param>
            <param name="islot">power meter slot</param>
            <returns>Power meter object</returns>
            <remarks>Copied from Lxx - added by Warren 20160904</remarks>
        </member>
        <member name="T:DiCon.Instrument.HP.IHPTLS">
            <summary>
            Interface of IHPTLS
            </summary>
        </member>
        <member name="M:DiCon.Instrument.HP.IHPTLS.SetmSlot(System.Int32)">
            <summary>
            Set slot
            </summary>
            <param name="iSlot">slot</param>
        </member>
        <member name="M:DiCon.Instrument.HP.IHPTLS.GetmSlot">
            <summary>
            Get slot
            </summary>
            <returns>slot</returns>
        </member>
        <member name="M:DiCon.Instrument.HP.IHPTLS.SetmPowerUnit(System.Int32)">
            <summary>
            Set Power Unit
            </summary>
            <param name="iPowerUnit">1(dBm), other(W)</param>
        </member>
        <member name="M:DiCon.Instrument.HP.IHPTLS.GetmPowerUnit">
            <summary>
            Get Power Unit
            </summary>
            <returns>unit</returns>
        </member>
        <member name="M:DiCon.Instrument.HP.IHPTLS.SetmPower(System.Double)">
            <summary>
            Set Power
            </summary>
            <param name="dPower">Power</param>
        </member>
        <member name="M:DiCon.Instrument.HP.IHPTLS.GetmPower">
            <summary>
            Get Power 
            </summary>
            <returns>power</returns>
        </member>
        <member name="M:DiCon.Instrument.HP.IHPTLS.SetmAtt(System.Double)">
            <summary>
            Set Attenuation
            </summary>
            <param name="dAtt">Attenuation</param>
        </member>
        <member name="M:DiCon.Instrument.HP.IHPTLS.GetmAtt">
            <summary>
            Get Attenuation
            </summary>
            <returns>Attenuation</returns>
        </member>
        <member name="M:DiCon.Instrument.HP.IHPTLS.SetmWL(System.Double)">
            <summary>
            Set WaveLength
            </summary>
            <param name="dWL">WaveLength</param>
        </member>
        <member name="M:DiCon.Instrument.HP.IHPTLS.GetmWL">
            <summary>
            Get WaveLength
            </summary>
            <returns>WaveLength</returns>
        </member>
        <member name="M:DiCon.Instrument.HP.IHPTLS.SetmMinWL(System.Double)">
            <summary>
            Set Min WaveLength
            </summary>
            <param name="dMinWL">Min WL</param>
        </member>
        <member name="M:DiCon.Instrument.HP.IHPTLS.GetmMinWL">
            <summary>
            Get Min WaveLength
            </summary>
            <returns>Min WL</returns>
        </member>
        <member name="M:DiCon.Instrument.HP.IHPTLS.SetmMaxWL(System.Double)">
            <summary>
            Set Max WaveLength
            </summary>
            <param name="dMaxWL">Max WL</param>
        </member>
        <member name="M:DiCon.Instrument.HP.IHPTLS.GetmMaxWL">
            <summary>
            Get Max WaveLength
            </summary>
            <returns>Max WL</returns>
        </member>
        <member name="M:DiCon.Instrument.HP.IHPTLS.SetmSweepSpeed(System.Int32)">
            <summary>
            Set Sweep Speed
            </summary>
            <param name="iSweepSpeed">Sweep Speed</param>
        </member>
        <member name="M:DiCon.Instrument.HP.IHPTLS.GetmSweepSpeed">
            <summary>
            Get Sweep Speed
            </summary>
            <returns>Sweep Speed</returns>
        </member>
        <member name="M:DiCon.Instrument.HP.IHPTLS.init">
            <summary>
            init
            </summary>
            <returns>Return connection status</returns> 
        </member>
        <member name="M:DiCon.Instrument.HP.IHPTLS.SetWL(System.Double)">
            <summary>
            Set wavelength
            </summary>
            <param name="WL">wavelength</param>
        </member>
        <member name="M:DiCon.Instrument.HP.IHPTLS.setUnit(System.Int32)">
            <summary>
            Sets unit of the power
            </summary>
            <param name="units">1(dBm), other(W)</param>
        </member>
        <member name="M:DiCon.Instrument.HP.IHPTLS.SetActive(System.Boolean,DiCon.Instrument.HP.TLS_PATH)">
            <summary>
            Set program to read tunable laser, and set regulated path
            </summary>
            <param name="state">Used to indicate status</param>
            <param name="path">Used tunable laser regulated path</param>
        </member>
        <member name="M:DiCon.Instrument.HP.IHPTLS.SetActive(System.Boolean)">
            <summary>
            Set program to read tunable laser
            </summary>
            <param name="state">Used to indicate status</param>
        </member>
        <member name="M:DiCon.Instrument.HP.IHPTLS.SetPower(System.Double)">
            <summary>
            Set power
            </summary>
            <param name="pow">power</param>
        </member>
        <member name="M:DiCon.Instrument.HP.IHPTLS.ReadWL">
            <summary>
            Read current wavelength
            </summary>
            <returns>wavelength</returns>
        </member>
        <member name="T:DiCon.Instrument.HP.TLS_PATH">
            <summary>
            tunable laser regulated path
            </summary>
        </member>
        <member name="F:DiCon.Instrument.HP.TLS_PATH.NONE">
            <summary>
            Use Default
            </summary>
        </member>
        <member name="F:DiCon.Instrument.HP.TLS_PATH.HIGHpower">
            <summary>
            The High Power output is regulated.
            </summary>
        </member>
        <member name="F:DiCon.Instrument.HP.TLS_PATH.LOWSse">
            <summary>
            The Low SSE output is regulated.
            </summary>
        </member>
        <member name="F:DiCon.Instrument.HP.TLS_PATH.HIGHpowerLow">
            <summary>
            Both outputs are active but only the High Power output is Regulated.
            </summary>
        </member>
        <member name="F:DiCon.Instrument.HP.TLS_PATH.LOWSseHigh">
            <summary>
            Both outputs are active but only the Low SSE output is Regulated.
            </summary>
        </member>
        <member name="T:DiCon.Instrument.HP.HPTLS">
            <summary>
            Agilent Tunable Laser Methods
            </summary>
            <example>
            This sample shows how to call the method .
            <code>
            class TestClass 
            {
                static int Main() 
                {
                    HPTLS tls = new HPTLS();
                    tls.setVISA(false);  //  false->NI488.2, true->VISA
                    tls.Addr = 24;
                    tls.BoardNumber = 0;
                    tls.Open();
                    tls.init();
                    tls.SetActive(true);
                    tls.SetWL(1550.00);
                    tls.setUnit(1);
                    tls.SetPower(0.00);
                    MessageBox.Show(tls.ReadWL().ToString());
                    tls.Close(); 
                }
            }
            </code>
            <code> 
            //This sample shows how to call the method when there are more than 2 lasers.
            
            class TestClass
            {
                static int Main() 
                {
                    SelectTLS select_tls = new SelectTLS();
                    ILaser2 tls = select_tls.TLS_Select(false,0); //  true->VISA, false->NI488.2 / 0:Agilent  1:Yenista
                    tls.Addr = 24;
                    tls.BoardNumber = 0;
                    tls.Open();
                    tls.init();
                    tls.SetActive(true);
                    tls.SetWL(1550.00);
                    tls.setUnit(1);
                    tls.SetPower(-5.00);
                    MessageBox.Show(tls.ReadWL().ToString());
                    tls.Close(); 
                }
            }
            </code>
            </example>    
        </member>
        <member name="M:DiCon.Instrument.HP.HPTLS.SetmSlot(System.Int32)">
            <summary>
            Set slot
            </summary>
            <param name="iSlot">slot</param>
        </member>
        <member name="M:DiCon.Instrument.HP.HPTLS.GetmSlot">
            <summary>
            Get slot
            </summary>
            <returns>slot</returns>
        </member>
        <member name="M:DiCon.Instrument.HP.HPTLS.SetmPowerUnit(System.Int32)">
            <summary>
            Set Power Unit
            </summary>
            <param name="iPowerUnit">1(dBm), other(W)</param>
        </member>
        <member name="M:DiCon.Instrument.HP.HPTLS.GetmPowerUnit">
            <summary>
            Get Power Unit
            </summary>
            <returns>unit</returns>
        </member>
        <member name="M:DiCon.Instrument.HP.HPTLS.SetmPower(System.Double)">
            <summary>
            Set Power
            </summary>
            <param name="dPower">Power</param>
        </member>
        <member name="M:DiCon.Instrument.HP.HPTLS.GetmPower">
            <summary>
            Get Power 
            </summary>
            <returns>power</returns>
        </member>
        <member name="M:DiCon.Instrument.HP.HPTLS.SetmAtt(System.Double)">
            <summary>
            Set Attenuation
            </summary>
            <param name="dAtt">Attenuation</param>
        </member>
        <member name="M:DiCon.Instrument.HP.HPTLS.GetmAtt">
            <summary>
            Get Attenuation
            </summary>
            <returns>Attenuation</returns>
        </member>
        <member name="M:DiCon.Instrument.HP.HPTLS.SetmWL(System.Double)">
            <summary>
            Set WaveLength
            </summary>
            <param name="dWL">WaveLength</param>
        </member>
        <member name="M:DiCon.Instrument.HP.HPTLS.GetmWL">
            <summary>
            Get WaveLength
            </summary>
            <returns>WaveLength</returns>
        </member>
        <member name="M:DiCon.Instrument.HP.HPTLS.SetmMinWL(System.Double)">
            <summary>
            Set Min WaveLength
            </summary>
            <param name="dMinWL">Min WL</param>
        </member>
        <member name="M:DiCon.Instrument.HP.HPTLS.GetmMinWL">
            <summary>
            Get Min WaveLength
            </summary>
            <returns>Min WL</returns>
        </member>
        <member name="M:DiCon.Instrument.HP.HPTLS.SetmMaxWL(System.Double)">
            <summary>
            Set Max WaveLength
            </summary>
            <param name="dMaxWL">Max WL</param>
        </member>
        <member name="M:DiCon.Instrument.HP.HPTLS.GetmMaxWL">
            <summary>
            Get Max WaveLength
            </summary>
            <returns>Max WL</returns>
        </member>
        <member name="P:DiCon.Instrument.HP.HPTLS.Addr">
            <summary>
            (Set device address)
            
            </summary>
        </member>
        <member name="P:DiCon.Instrument.HP.HPTLS.BoardNumber">
            <summary>
            Set device board number
            
            </summary>
        </member>
        <member name="M:DiCon.Instrument.HP.HPTLS.SetmSweepSpeed(System.Int32)">
            <summary>
            Set Sweep Speed
            </summary>
            <param name="iSweepSpeed">Sweep Speed</param>
        </member>
        <member name="M:DiCon.Instrument.HP.HPTLS.GetmSweepSpeed">
            <summary>
            Get Sweep Speed
            </summary>
            <returns>Sweep Speed</returns>
        </member>
        <member name="M:DiCon.Instrument.HP.HPTLS.SetAtt(System.Double)">
            <summary>
            Sets the level of attenuation
            </summary>
            <param name="att">Attenuation(dB)</param>
            <remarks>Added by Warren 20160904</remarks>
        </member>
        <member name="M:DiCon.Instrument.HP.HPTLS.Open">
            <summary>
            Opens a new serial port connection.
            </summary>
            <returns>Return connection status</returns>
        </member>
        <member name="M:DiCon.Instrument.HP.HPTLS.Read">
            <summary>
            Reads string data from a device into a user buffer.
            </summary>
            <returns>The string data read from the device.</returns>
        </member>
        <member name="M:DiCon.Instrument.HP.HPTLS.SendCommand(System.String)">
            <summary>
            Send string command to device
            </summary>
            <param name="strCMD">string command</param>
            <returns>Return connection status</returns> 
        </member>
        <member name="M:DiCon.Instrument.HP.HPTLS.ReadWL_Min">
            <summary>
            Get/Read Min WL of TLS 
            </summary>
            <returns>WL</returns>
            <remarks>Added by Warren 20140219</remarks>
        </member>
        <member name="M:DiCon.Instrument.HP.HPTLS.ReadWL_Max">
            <summary>
            Get/Read Max WL of TLS 
            </summary>
            <returns>WL</returns>
            <remarks>Added by Warren 20140219</remarks>
        </member>
        <member name="M:DiCon.Instrument.HP.HPTLS.GetTLS(DiCon.Instrument.HP.ILaser2,System.Int32,System.Int32,System.Double,System.Int32)">
            <summary>
            Create a tunable laser object
            </summary>
            <param name="tls">tunable laser object</param>
            <param name="iboard">board number</param>
            <param name="iaddr">tunalbe laser address</param>
            <param name="power">power</param>
            <param name="idbunit">power unit</param>
            <returns>Tunable laser object</returns>
            <remarks>Copied from Lxx - Added by Warren 20160904</remarks>
        </member>
        <member name="M:DiCon.Instrument.HP.HPTLS.SetWL(System.Double)">
            <summary>
            Set wavelength
            </summary>
            <param name="WL">wavelength</param>
        </member>
        <member name="M:DiCon.Instrument.HP.HPTLS.SetPower(System.Double)">
            <summary>
            Set power
            </summary>
            <param name="pow">power</param>
        </member>
        <member name="M:DiCon.Instrument.HP.HPTLS.ComInit(System.Boolean,System.Boolean,System.String,System.Int32)">
            <summary>
            Set visa , com , comport resource and comport baudrate
            </summary>
            <param name="visa">true:VISA, false:488.2</param>
            <param name="com">true:RS232, false:VISA</param>
            <param name="comno">comport resource</param>
            <param name="baudrate">comport Baud Rate</param>
        </member>
        <member name="M:DiCon.Instrument.HP.HPTLS.getVISA">
            <summary>
            Get Visa or 488.2
            </summary>
            <returns>true(Visa) or false(488.2)</returns>
        </member>
        <member name="M:DiCon.Instrument.HP.HPTLS.setVISA(System.Boolean)">
            <summary>
            Set Visa or NI488.2
            </summary>
            <param name="visa">visa=true(VISA) or visa=false(NI488.2)</param>
            <remarks>visa default value is false</remarks>
        </member>
        <member name="M:DiCon.Instrument.HP.HPTLS.setVisa(System.Boolean)">
            <summary>
            Set Visa or NI488.2
            </summary>
            <param name="visa">true:VISA or false:488.2</param>
        </member>
        <member name="M:DiCon.Instrument.HP.HPTLS.setCOM(System.Boolean)">
            <summary>
            Set Visa or RS232
            </summary>
            <param name="serial">serial=true(RS232) or serial=false(VISA)</param>
            <remarks>visa default value is false</remarks>
        </member>
        <member name="M:DiCon.Instrument.HP.HPTLS.setCOM_Baud(System.Int32)">
            <summary>
            Set RS232 Baud Rate
            </summary>
            <param name="baud">baud rate</param>
        </member>
        <member name="M:DiCon.Instrument.HP.HPTLS.getCOM">
            <summary>
            Get Visa or RS232
            </summary>
            <returns>true(RS232) or false(VISA)</returns>
        </member>
        <member name="M:DiCon.Instrument.HP.HPTLS.setCOM_NO(System.String)">
            <summary>
            Set RS232 COM NO
            </summary>
            <param name="com">COM Number</param>
        </member>
        <member name="M:DiCon.Instrument.HP.HPTLS.getCOM_NO">
            <summary>
            Get RS232 COM NO
            </summary>
            <returns>COM NO</returns>
        </member>
        <member name="M:DiCon.Instrument.HP.HPTLS.ReadWL">
            <summary>
            Read current wavelength
            </summary>
            <returns>wavelength</returns>
        </member>
        <member name="M:DiCon.Instrument.HP.HPTLS.setUnit(System.Int32)">
            <summary>
            Sets unit of the power
            </summary>
            <param name="units">1(dBm), other(W)</param>
        </member>
        <member name="M:DiCon.Instrument.HP.HPTLS.SetActive(System.Boolean,DiCon.Instrument.HP.TLS_PATH)">
            <summary>
            Set program to read tunable laser, and set regulated path
            </summary>
            <param name="state">Used to indicate status</param>
            <param name="tls_path">Used tunable laser regulated path</param>
        </member>
        <member name="M:DiCon.Instrument.HP.HPTLS.SetActive(System.Boolean)">
            <summary>
            Set program to read tunable laser
            </summary>
            <param name="state">Used to indicate status</param>
        </member>
        <member name="M:DiCon.Instrument.HP.HPTLS.Close">
            <summary>
            Closes the port connection and disposes of the internal Stream object
            </summary>
        </member>
        <member name="M:DiCon.Instrument.HP.HPTLS.SetCoherenceControl">
            <summary>
            Set Coherence
            </summary>    
            <remarks> Not work for HP</remarks>
        </member>
        <member name="M:DiCon.Instrument.HP.HPTLS.init">
            <summary>
            Initialize tunable laser for ILaser2
            </summary>
            <returns>Return connection status</returns> 
        </member>
        <member name="T:DiCon.Instrument.HP.IGP750">
            <summary>
            A class or struct that implements the interface must implement the members of the interface that are specified in the interface definition. 
            </summary>
        </member>
        <member name="M:DiCon.Instrument.HP.IGP750.SendDataCmd(System.String)">
            <summary>
            Send Data CMD
            </summary>
            <param name="strCMD">CMD</param>
        </member>
        <member name="M:DiCon.Instrument.HP.IGP750.ReadData">
            <summary>
            Read Data
            </summary>
            <returns>Data</returns>
        </member>
        <member name="M:DiCon.Instrument.HP.IGP750.CloseDevice">
            <summary>
            Close Device
            </summary>
        </member>
        <member name="T:DiCon.Instrument.HP.ILaser">
            <summary>
            A class or struct that implements the interface must implement the members of the interface that are specified in the interface definition. 
            </summary>
        </member>
        <member name="M:DiCon.Instrument.HP.ILaser.SetWL(System.Double)">
            <summary>
            Set wavelength
            </summary>
            <param name="WL">wavelength</param>
        </member>
        <member name="M:DiCon.Instrument.HP.ILaser.SetPower(System.Double)">
            <summary>
            Set power
            </summary>
            <param name="pow">power</param>
        </member>
        <member name="M:DiCon.Instrument.HP.ILaser.ReadWL">
            <summary>
            Read current wavelength
            </summary>
            <returns>wavelength</returns>
        </member>
        <member name="T:DiCon.Instrument.HP.ILaser2">
            <summary>
            <code> 
            members:
                 int BoardNumber { set; }
                 int Addr { set; }
                 void setUnit(int units);
                 void setVisa(bool visa);
                 void SetActive(bool state);
                 bool Open();
                 void Close();
                 void init();
                 void SetWL(double WL);
                 void SetPower(double pow);
                 double ReadWL();
                 double ReadWL_Min();
                 double ReadWL_Max();
                 ILaser2 GetTLS(ILaser2 tls, int iboard, int iaddr, double power, int idbunit);
                 void SetCohenreceControl(bool enable);
                 void setCOM(bool serial);
                 void setCOM_NO(string com);
                 void setCOM_Baud(int baud);
                 void ComInit(bool visa, bool com, string comno, int baud);
                 void SendCommand(string strCMD);
                 </code>> 
            </summary>
        </member>
        <member name="P:DiCon.Instrument.HP.ILaser2.BoardNumber">
            <summary>
            Set device board number
            </summary>
        </member>
        <member name="P:DiCon.Instrument.HP.ILaser2.Addr">
            <summary>
            Set device address
            
            </summary>
        </member>
        <member name="M:DiCon.Instrument.HP.ILaser2.setUnit(System.Int32)">
            <summary>
            Sets unit of the power for ILaser2
            </summary>
            <param name="units">1(dBm), other(W)</param>
        </member>
        <member name="M:DiCon.Instrument.HP.ILaser2.setVisa(System.Boolean)">
            <summary>
            Sets Visa or NI488.2 for ILaser2
            </summary>
            <param name="visa">true,false</param>
        </member>
        <member name="M:DiCon.Instrument.HP.ILaser2.SetActive(System.Boolean)">
            <summary>
            Set program to enable tunable laser for ILaser2
            </summary>
            <param name="state">true(ENABLE) false(DISABLE)</param>
        </member>
        <member name="M:DiCon.Instrument.HP.ILaser2.SetActive(System.Boolean,DiCon.Instrument.HP.TLS_PATH)">
            <summary>
            Set program to read tunable laser, and set regulated path
            </summary>
            <param name="state">Used to indicate status</param>
            <param name="path">Used tunable laser regulated path</param>
        </member>
        <member name="M:DiCon.Instrument.HP.ILaser2.Open">
            <summary>
            Opens a new serial port connection  for ILaser2
            
            </summary>
            <returns>Return connection status</returns>
        </member>
        <member name="M:DiCon.Instrument.HP.ILaser2.Close">
            <summary>
            Closes the port connection and disposes of the internal Stream object for ILaser2
            
            </summary>
        </member>
        <member name="M:DiCon.Instrument.HP.ILaser2.init">
            <summary>
            Initialize tunable laser and IEEEAdPrinc  for ILaser2
            </summary>
            <returns>Return connection status</returns> 
        </member>
        <member name="M:DiCon.Instrument.HP.ILaser2.SetWL(System.Double)">
            <summary>
            Set wavelength of tunable laser for ILaser2
            </summary>
            <param name="WL">Wavelength</param>
        </member>
        <member name="M:DiCon.Instrument.HP.ILaser2.SetPower(System.Double)">
            <summary>
            Set power of tunable laser for ILaser2
            </summary> 
            <param name="pow">Power</param>
        </member>
        <member name="M:DiCon.Instrument.HP.ILaser2.ReadWL">
            <summary>
            Get the current wavelength of tunable laser for ILaser2
            </summary>
            <returns> Wavelength</returns>
        </member>
        <member name="M:DiCon.Instrument.HP.ILaser2.GetTLS(DiCon.Instrument.HP.ILaser2,System.Int32,System.Int32,System.Double,System.Int32)">
            <summary>
            Create a tunable laser object  for ILaser2
            </summary>
            <param name="tls">tunable laser object</param>
            <param name="iboard">board number</param>
            <param name="iaddr">tunalbe laser address</param>
            <param name="power">power</param>
            <param name="idbunit">power unit</param>
            <returns>Tunable laser object</returns>
        </member>
        <member name="M:DiCon.Instrument.HP.ILaser2.ReadWL_Min">
            <summary>
            Get/Read Min WL of TLS for ILaser2
            </summary>
            <returns> Wavelength</returns>
        </member>
        <member name="M:DiCon.Instrument.HP.ILaser2.ReadWL_Max">
            <summary>
            Get/Read Max WL of TLS for ILaser2
            </summary>
            <returns> Wavelength</returns>
        </member>
        <member name="M:DiCon.Instrument.HP.ILaser2.setCOM(System.Boolean)">
            <summary>
            Set Visa or RS232
            </summary>
            <param name="serial">serial=true(RS232) or serial=false(VISA)</param>
            <remarks>visa default value is false</remarks>
        </member>
        <member name="M:DiCon.Instrument.HP.ILaser2.setCOM_NO(System.String)">
            <summary>
            Set RS232 COM NO
            </summary>
            <param name="com">COM Number</param>
        </member>
        <member name="M:DiCon.Instrument.HP.ILaser2.setCOM_Baud(System.Int32)">
            <summary>
            Set RS232 Baud Rate
            </summary>
            <param name="baud">baud rate</param>
        </member>
        <member name="M:DiCon.Instrument.HP.ILaser2.ComInit(System.Boolean,System.Boolean,System.String,System.Int32)">
            <summary>
            Set VISA, COM, Comport Resource, Comport Baudrate
            </summary>
            <param name="visa">true: VISA, false:488.2</param>
            <param name="com">true: RS232, false:VISA</param>
            <param name="comno">Comport Resource</param>
            <param name="baud">Baud Rate</param>
        </member>
        <member name="M:DiCon.Instrument.HP.ILaser2.SendCommand(System.String)">
            <summary>
            Send string command to device
            </summary>
            <param name="strCMD">string command</param>
            <returns>Return connection status</returns> 
        </member>
        <member name="T:DiCon.Instrument.HP.IThermotorn">
            <summary>
            A class or struct that implements the interface must implement the members of the interface that are specified in the interface definition. 
            </summary>
        </member>
        <member name="M:DiCon.Instrument.HP.IThermotorn.init">
            <summary>
            init
            </summary>
        </member>
        <member name="M:DiCon.Instrument.HP.IThermotorn.SetThermotron(System.Int32)">
            <summary>
            set thermotron
            </summary>
            <param name="intTemp">Temperature</param>
        </member>
        <member name="M:DiCon.Instrument.HP.IThermotorn.SetThermotron(System.Int32,System.Int32)">
            <summary>
            Set Thermotron
            </summary>
            <param name="intTemp">Temperature</param>
            <param name="Degree_per_min">Degree per min</param>
        </member>
        <member name="M:DiCon.Instrument.HP.IThermotorn.GetThermoTronTemp">
            <summary>
            Get Thermotron Temperature
            </summary>
            <returns>Temperature</returns>
        </member>
        <member name="M:DiCon.Instrument.HP.IThermotorn.Stop">
            <summary>
            Stop the Thermotron
            </summary>
        </member>
        <member name="M:DiCon.Instrument.HP.IThermotorn.SetBoardNumber(System.Int32)">
            <summary>
            set BoardNumber
            </summary>
            <param name="iboard">board</param>
        </member>
        <member name="M:DiCon.Instrument.HP.IThermotorn.SetAddr(System.Int32)">
            <summary>
            Set Address
            </summary>
            <param name="iaddr">addr</param>
        </member>
        <member name="M:DiCon.Instrument.HP.IThermotorn.open">
            <summary>
            Open
            </summary>
            <returns>bool</returns>
        </member>
        <member name="T:DiCon.Instrument.HP.ILambdaScan">
            <summary>
            Interface of LambdaScan
            </summary>
        </member>
        <member name="M:DiCon.Instrument.HP.ILambdaScan.LambdaScanByCmd(DiCon.Instrument.HP.HP816x,System.Int32,System.Double,System.Double,System.Double,System.Boolean,System.Int32)">
            <summary>
            Lambda Scan By Cmd
            </summary>
            <param name="blHighSpeed">Is High Speed</param>
            <param name="dStartWL">Start WL</param>
            <param name="dStepWL">Step WL</param>
            <param name="dStopWL">Stop WL</param>
            <param name="hp816x">hp816x object</param>
            <param name="iPower">Power</param>
            <param name="iTLSAddr">TLS Addr</param>
            <returns>bool</returns>
        </member>
        <member name="M:DiCon.Instrument.HP.ILambdaScan.IsReady(DiCon.Instrument.HP.HP816x,System.Int32)">
            <summary>
             LambdaScan is ready
            </summary>
            <param name="iTLSAddr">TLS Addr</param>
            <param name="hp816x">hp816x object</param>
            <returns>bool</returns>
        </member>
        <member name="M:DiCon.Instrument.HP.ILambdaScan.Initial(DiCon.Instrument.HP.HP816x,System.Int32,System.Int32)">
            <summary>
            Init for hp816x
            </summary>
            <param name="hp816x">hp816x object</param>
            <param name="iTLSAddr">TLS Addr</param>
            <param name="iPower">Power</param>
            <returns>HP816x device</returns>
        </member>
        <member name="T:DiCon.Instrument.HP.LambdaScan">
             <summary>
             Agilent Tunable Laser Lambda Scan Methods
             </summary>
             <example>
             This sample shows how to call the method .
             <code>
             class TestClass 
             {
                 LambdaScan lambda_scan = new LambdaScan();
                 HP816x hp816x = new HP816x();
                 static int Main() 
                 {
                        try
                        {
                          hp816x.setVisa(true); //true:VISA, false:NI488.2
                          lambda_scan.Initial(hp816x, int.Parse(txtTLSAddr.Text), int.Parse(txtPower.Text));
                        }
                        catch (Exception ex)
                        {
                          MessageBox.Show(ex.ToString());
                        }
            
                        if (lambda_scan.IsReady(hp816x,int.Parse(txtTLSAddr.Text))
                           lambda_scan.LambdaScanByCmd(hp816x,int.Parse(txtTLSAddr.Text), double.Parse(txtStartWL.Text), double.Parse(txtStopWL.Text), double.Parse(txtStepWL.Text), chkHighSpeed.Checked, int.Parse(txtPower.Text));
                        hp816x.GoToLocal();   
                 }
             }
             </code>
             </example>    
        </member>
        <member name="M:DiCon.Instrument.HP.LambdaScan.IsReady(DiCon.Instrument.HP.HP816x,System.Int32)">
            <summary>
            Lambda Scan IsReady (only TLS)
            </summary>
            <param name="hp816x">tunable laser object</param>
            <param name="iTLSAddr">tunable laser address</param>
            <returns>Is the TLS idle?</returns>
        </member>
        <member name="M:DiCon.Instrument.HP.LambdaScan.Initial(DiCon.Instrument.HP.HP816x,System.Int32,System.Int32)">
            <summary>
            Lambda Scan Initial (only TLS)
            </summary>
            <param name="hp816x">tunable laser object</param>
            <param name="iTLSAddr">tunable laser address</param>
            <param name="iPower">Power of TLS</param>
            <returns>hp816x object</returns>
        </member>
        <member name="M:DiCon.Instrument.HP.LambdaScan.LambdaScanByCmd(DiCon.Instrument.HP.HP816x,System.Int32,System.Double,System.Double,System.Double,System.Boolean,System.Int32)">
            <summary>
            Lambda Scan (only TLS)
            </summary>
            <param name="hp816x">tunable laser object</param>
            <param name="iTLSAddr">tunable laser address</param>
            <param name="dStartWL">Start Wavelength</param>
            <param name="dStopWL">Stop Wavelength</param>
            <param name="dStepWL">Step</param>
            <param name="blHighSpeed">High or low speed of Lambda Scan</param>
            <param name="iPower">Power of TLS</param>
            <returns>Does the Lambda Scan run successfully?</returns>
        </member>
        <member name="T:DiCon.Instrument.HP.SelectTLS">
            <summary>
            Select Agilent Tunable Laser or Yenista Tunable Laser Class
            </summary>
        </member>
        <member name="M:DiCon.Instrument.HP.SelectTLS.#ctor">
            <summary>
            Select Agilent Tunable Laser or Yenista Tunable Laser Constructor Method
            </summary>
        </member>
        <member name="M:DiCon.Instrument.HP.SelectTLS.init">
            <summary>
            override init
            </summary>
        </member>
        <member name="M:DiCon.Instrument.HP.SelectTLS.TLS_Select(System.Boolean,System.Int32)">
            <summary>
            Select Agilent Tunable Laser or Yenista Tunable Laser Method 
            </summary>
            <param name="visa"> true(Visa) or false(488.2) </param>
            <param name="s"> 0:Agilent 1:Yenista 2:GoLight </param>
            <returns>
            object of ILaser2
            </returns>        
        </member>
        <member name="M:DiCon.Instrument.HP.SelectTLS.TLS_Select(System.Int32)">
            <summary>
            Select Agilent Tunable Laser or Yenista Tunable Laser Method
            </summary>
            <param name="s"> 0:Agilent 1:Yenista </param>
            <returns>
            object of ILaser2
            </returns>        
        </member>
        <member name="T:DiCon.Instrument.HP.T100S_HP">
            <summary>
            Yenista Tunable Laser Methods
            </summary>
            <example>
            <code>
            //This sample shows how to call the method.
            
            class TestClass 
            {
                static int Main() 
                {
                    T100S-HP tls = new T100S-HP();
                    tls.setVisa(true); //true:Visa, false:488.2
                    tls.Addr = 24;
                    tls.BoardNumber = 0;
                    tls.Open();
                    tls.init();
                    tls.SetActive(true);
                    tls.SetWL(1550.00);
                    tls.setUnit(1);
                    tls.SetPower(0.00);
                    MessageBox.Show(tls.ReadWL().ToString());
                    tls.Close(); 
                }
            }
            </code>
            <code> 
            //This sample shows how to call the method when there are more than 2 lasers.
            
            class TestClass
            {
                static int Main() 
                {
                    SelectTLS select_tls = new SelectTLS();
                    ILaser2 tls = select_tls.TLS_Select(true,1); //true:Visa, false:488.2 /  0:Agilent  1:Yenista
                    tls.Addr = 24;
                    tls.BoardNumber = 0;
                    tls.Open();
                    tls.init();
                    tls.SetActive(true);
                    tls.SetWL(1550.00);
                    tls.setUnit(1);
                    tls.SetPower(-5.00);
                    MessageBox.Show(tls.ReadWL().ToString());
                    tls.Close(); 
                }
            }
            </code>
            </example>    
        </member>
        <member name="F:DiCon.Instrument.HP.T100S_HP.IEEEBoard">
            <summary>
            GPIB board number
            
            </summary>
        </member>
        <member name="F:DiCon.Instrument.HP.T100S_HP.IEEEAdPrinc">
            <summary>
            GPIB board address
            
            </summary>
        </member>
        <member name="F:DiCon.Instrument.HP.T100S_HP.wl">
            <summary>
            Wavelength
            
            </summary>
        </member>
        <member name="F:DiCon.Instrument.HP.T100S_HP.WLmin">
            <summary>
            Min of Wavelength
            
            </summary>
        </member>
        <member name="F:DiCon.Instrument.HP.T100S_HP.WLmax">
            <summary>
            Max of Wavelength
            
            </summary>
        </member>
        <member name="P:DiCon.Instrument.HP.T100S_HP.Addr">
            <summary>
            (Set device address)
            
            </summary>
        </member>
        <member name="P:DiCon.Instrument.HP.T100S_HP.BoardNumber">
            <summary>
            Set device board number
            
            </summary>
        </member>
        <member name="M:DiCon.Instrument.HP.T100S_HP.ComInit(System.Boolean,System.Boolean,System.String,System.Int32)">
            <summary>
            Set visa , com , comport resource and comport baudrate
            </summary>
            <param name="visa">true:VISA, false:488.2</param>
            <param name="com">true:RS232, false:VISA</param>
            <param name="comno">comport resource</param>
            <param name="baudrate">comport Baud Rate</param>
        </member>
        <member name="M:DiCon.Instrument.HP.T100S_HP.setCOM(System.Boolean)">
            <summary>
            Set Visa or RS232
            </summary>
            <param name="serial">serial=true(RS232) or serial=false(VISA)</param>
            <remarks>visa default value is false</remarks>
        </member>
        <member name="M:DiCon.Instrument.HP.T100S_HP.setCOM_Baud(System.Int32)">
            <summary>
            Set RS232 Baud Rate
            </summary>
            <param name="baud">baud rate</param>
        </member>
        <member name="M:DiCon.Instrument.HP.T100S_HP.setCOM_NO(System.String)">
            <summary>
            Set RS232 COM NO
            </summary>
            <param name="com">COM address</param>
        </member>
        <member name="M:DiCon.Instrument.HP.T100S_HP.Open">
            <summary>
            Opens a new serial port connection.
            </summary>
            <returns>Return connection status</returns>
        </member>
        <member name="M:DiCon.Instrument.HP.T100S_HP.Close">
            <summary>
            Closes the port connection and disposes of the internal Stream object
            </summary>
        </member>
        <member name="M:DiCon.Instrument.HP.T100S_HP.Read">
            <summary>
            Reads string data from a device into a user buffer.
            </summary>
            <returns>The string data read from the device.</returns>
        </member>
        <member name="M:DiCon.Instrument.HP.T100S_HP.getAddr">
            <summary>
            Get device address
            </summary>
            <returns>Address</returns>
        </member>
        <member name="M:DiCon.Instrument.HP.T100S_HP.getVISA">
            <summary>
            Get Visa or 488.2
            </summary>
            <returns>true(Visa) or false(488.2)</returns>
        </member>
        <member name="M:DiCon.Instrument.HP.T100S_HP.setVisa(System.Boolean)">
            <summary>
            Set Visa or NI488.2
            </summary>
            <param name="visa">visa=true(VISA) or visa=false(NI488.2)</param>
            <remarks>visa default value is false</remarks>
        </member>
        <member name="M:DiCon.Instrument.HP.T100S_HP.CheckWL(System.Double)">
            <summary>
            Check wavelength if exceed between the min and max
            
            </summary>
            <param name="wl_nm"> wavelength </param>
            <returns>Return the wavelength varification status</returns>
        </member>
        <member name="M:DiCon.Instrument.HP.T100S_HP.SendCommand(System.String)">
            <summary>
            Send string command to device
            </summary>
            <param name="strCMD">string command</param>
            <returns>Return connection status</returns> 
        </member>
        <member name="M:DiCon.Instrument.HP.T100S_HP.SetMotorSpeed(System.Int32)">
            <summary>
            Set MotorSpeed of tunable laser
            </summary>
            <param name="speed"> Used to indicate status</param>
        </member>
        <member name="M:DiCon.Instrument.HP.T100S_HP.GetSoftVersion">
            <summary>
            Query the version of TLS
            </summary>
            <returns> Version</returns>
        </member>
        <member name="M:DiCon.Instrument.HP.T100S_HP.ReadWL_Min">
            <summary>
            Get/Read Min WL of TLS
            </summary>
            <returns> Wavelength</returns>
        </member>
        <member name="M:DiCon.Instrument.HP.T100S_HP.ReadWL_Max">
            <summary>
            Get/Read Max WL of TLS
            </summary>
            <returns>Wavelength</returns>
        </member>
        <member name="M:DiCon.Instrument.HP.T100S_HP.SetFrequency(System.Double)">
            <summary>
            Set Frequency of tunable laser
            </summary>
            <param name="f">Frequency</param>
        </member>
        <member name="M:DiCon.Instrument.HP.T100S_HP.GetFrequency">
            <summary>
            Get/Read Frequency of TLS
            </summary>
            <returns>Frequency</returns>
        </member>
        <member name="M:DiCon.Instrument.HP.T100S_HP.GetFrequencyMin">
            <summary>
            Get/Read Min Frequency of TLS
            </summary>
            <returns>Frequency</returns>
        </member>
        <member name="M:DiCon.Instrument.HP.T100S_HP.GetFrequencyMax">
            <summary>
            Get/Read Max Frequency of TLS
            </summary>
            <returns>Frequency</returns>
        </member>
        <member name="M:DiCon.Instrument.HP.T100S_HP.GetPower">
            <summary>
            Get/Read Power of TLS
            </summary>
            <returns> Power</returns>
        </member>
        <member name="M:DiCon.Instrument.HP.T100S_HP.SetCurrent(System.Double)">
            <summary>
            Set Current of tunable laser
            </summary>
            <param name="i">Current</param>
        </member>
        <member name="M:DiCon.Instrument.HP.T100S_HP.GetCurrent">
            <summary>
            Get/Read Current of TLS
            </summary>
            <returns>Current</returns>
        </member>
        <member name="M:DiCon.Instrument.HP.T100S_HP.DoWLReferencing">
            <summary>
            Do Auto Calibration
            </summary> 
        </member>
        <member name="M:DiCon.Instrument.HP.T100S_HP.GetMotorSpeed">
            <summary>
            Get/Read MotorSpeed of TLS
            </summary>
            <returns>MotorSpeed</returns>
        </member>
        <member name="M:DiCon.Instrument.HP.T100S_HP.SetCohenreceControl(System.Boolean)">
            <summary>
            Sets CohenreceControl to ON or OFF
            </summary>
            <param name="enable">true(ON), false(OFF)</param>
        </member>
        <member name="M:DiCon.Instrument.HP.T100S_HP.SetActiveCavityControl(System.Boolean)">
            <summary>
            Sets ActiveCavityControl to ON or OFF
            </summary>
            <param name="enable">true(ON), false(OFF)</param>
        </member>
        <member name="M:DiCon.Instrument.HP.T100S_HP.SetFineScanningWLOffset(System.Double)">
            <summary>
            Sets SetFineScanningWLOffset in nm
            </summary>
            <param name="wlOffset_pm">nm</param>
        </member>
        <member name="M:DiCon.Instrument.HP.T100S_HP.SetFineScanningFOffset(System.Double)">
            <summary>
            Sets FineScanningFOffset in GHZ
            </summary>
            <param name="fOffset_ghz"> GHZ</param>
        </member>
        <member name="M:DiCon.Instrument.HP.T100S_HP.SetAutomaticPowerControl(System.Boolean)">
            <summary>
            Sets AutomaticPowerControl to ON or OFF
            </summary>
            <param name="enable">true(ON), false(OFF)</param>
        </member>
        <member name="M:DiCon.Instrument.HP.T100S_HP.GetTLS(DiCon.Instrument.HP.ILaser2,System.Int32,System.Int32,System.Double,System.Int32)">
            <summary>
            Create a tunable laser object
            </summary>
            <param name="tutls">tunable laser object</param>
            <param name="iboard">board number</param>
            <param name="iaddr">tunalbe laser address</param>
            <param name="power">power</param>
            <param name="idbunit">power unit</param>
            <returns>Tunable laser object</returns>
        </member>
        <member name="M:DiCon.Instrument.HP.T100S_HP.setUnit(System.Int32)">
            <summary>
            Sets unit of the power
            </summary>
            <param name="units">1(dBm), other(W)</param>
        </member>
        <member name="M:DiCon.Instrument.HP.T100S_HP.SetPower(System.Double)">
            <summary>
            Set power of tunable laser
            </summary> 
            <param name="p">Power</param>
        </member>
        <member name="M:DiCon.Instrument.HP.T100S_HP.ReadWL">
            <summary>
            Get the current wavelength of tunable laser
            </summary>
            <returns> Wavelength</returns>
        </member>
        <member name="M:DiCon.Instrument.HP.T100S_HP.SetWL(System.Double)">
            <summary>
            Set wavelength of tunable laser
            </summary>
            <param name="WL">Wavelength</param>
        </member>
        <member name="M:DiCon.Instrument.HP.T100S_HP.init">
            <summary>
            Initialize tunable laser for ILaser2
            </summary>
            <returns>Return connection status</returns> 
        </member>
        <member name="M:DiCon.Instrument.HP.T100S_HP.SetActive(System.Boolean,DiCon.Instrument.HP.TLS_PATH)">
            <summary>
            Set program to read tunable laser, and set regulated path
            </summary>
            <param name="state">Used to indicate status</param>
            <param name="tls_path">T100S_HP can't work</param>
        </member>
        <member name="M:DiCon.Instrument.HP.T100S_HP.SetActive(System.Boolean)">
            <summary>
            Set program to enable tunable laser
            </summary>
            <param name="enable">true(ENABLE) false(DISABLE)</param>
        </member>
        <member name="T:DiCon.Instrument.HP.Thermotorn8200">
            <summary>
            Define Thermotorn's Methods
            </summary>
        </member>
        <member name="M:DiCon.Instrument.HP.Thermotorn8200.init">
            <summary>
            init
            </summary>
        </member>
        <member name="M:DiCon.Instrument.HP.Thermotorn8200.SetThermotron(System.Int32)">
            <summary>
            Set Temperature of Thermotron
            </summary>
            <param name="intTemp">Temperature</param>
        </member>
        <member name="M:DiCon.Instrument.HP.Thermotorn8200.SetThermotron(System.Int32,System.Int32)">
            <summary>
            Set Temperature of Thermotron
            </summary>
            <param name="intTemp">Temperature</param>
            <param name="Degree_per_min">Degree per min</param>
        </member>
        <member name="M:DiCon.Instrument.HP.Thermotorn8200.GetThermoTronTemp">
            <summary>
            Get Temperature of Thermotron
            </summary>
            <returns>Temperature</returns>
        </member>
        <member name="M:DiCon.Instrument.HP.Thermotorn8200.Stop">
            <summary>
            Stop the Thermotron
            </summary>
        </member>
        <member name="M:DiCon.Instrument.HP.Thermotorn8200.SetBoardNumber(System.Int32)">
            <summary>
            Set BoardNumber of Thermotron
            </summary>
            <param name="iboard">board</param>
        </member>
        <member name="M:DiCon.Instrument.HP.Thermotorn8200.SetAddr(System.Int32)">
            <summary>
            Set Address of Thermotron
            </summary>
            <param name="iaddr">Address</param>
        </member>
        <member name="M:DiCon.Instrument.HP.Thermotorn8200.open">
            <summary>
            Open Thermotron
            </summary>
            <returns>bool</returns>
        </member>
        <member name="T:DiCon.Instrument.HP.WriteReadINI">
            <summary>
            WriteReadINI Methods
            </summary>
        </member>
        <member name="P:DiCon.Instrument.HP.WriteReadINI.FilePath">
            <summary>
            FilePath
            </summary>
        </member>
        <member name="M:DiCon.Instrument.HP.WriteReadINI.#ctor(System.String)">
            <summary>
            WriteReadINI
            </summary>
        </member>
        <member name="M:DiCon.Instrument.HP.WriteReadINI.Finalize">
            <summary>
            ~WriteReadINI
            </summary>
        </member>
        <member name="M:DiCon.Instrument.HP.WriteReadINI.Dispose">
            <summary>
            Release resource (called by the programmer)
            </summary>
        </member>
        <member name="M:DiCon.Instrument.HP.WriteReadINI.Dispose(System.Boolean)">
            <summary>
            Release resource (called by the System)
            </summary>        
        </member>
        <member name="M:DiCon.Instrument.HP.WriteReadINI.IniWriteValue(System.String,System.String,System.String)">
            <summary>
            Set KeyValue
            </summary>        
        </member>
        <member name="M:DiCon.Instrument.HP.WriteReadINI.IniReadValue(System.String,System.String)">
            <summary>
            Get Value according to Key
            </summary>
        </member>
        <member name="M:DiCon.Instrument.HP.WriteReadINI.IniReadValue(System.String,System.String,System.String)">
            <summary>
            Get Value according to Key (using DefaultValue if no)
            </summary>
        </member>
    </members>
</doc>
